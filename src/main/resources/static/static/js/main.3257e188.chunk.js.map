{"version":3,"sources":["components/layout/Root.tsx","styles/normalize.ts","store/members/types.ts","store/members/MemberModel.ts","utils/RfiDeserializer.ts","store/members/actions.ts","components/layout/Page.tsx","utils/api.ts","store/members/sagas.ts","store/members/FeedbackModel.ts","components/layout/input/Feedback.tsx","components/table/EditTable.tsx","components/layout/NavDrawer.tsx","components/layout/button/SpeedDialBtn.tsx","pages/members/index.tsx","routes.tsx","styles/theme/dark.ts","main.tsx","serviceWorker.ts","store/layout/types.ts","store/layout/reducer.ts","store/members/reducer.ts","store/squadrons/types.ts","store/squadrons/actions.ts","store/squadrons/sagas.ts","store/squadrons/reducer.ts","store/flights/types.ts","store/flights/reducer.ts","store/AETs/types.ts","store/AETs/reducer.ts","store/flights/actions.ts","store/flights/sagas.ts","store/AETs/actions.ts","store/AETs/sagas.ts","store/index.ts","index.tsx","configureStore.ts"],"names":["Root","children","Wrapper","styled","MemberActionTypes","normalize","css","MemberModel","id","full_name","grade","assigned_pas","dafsc","office_symbol","duty_title","duty_start_date","duty_phone","awardec_status","epr_opr_status","this","MemberDeserializer","items","map","item","membersFetchSuccess","payload","action","FETCH_SUCCESS","deserialize","membersFetchError","message","FETCH_ERROR","Page","callApi","method","path","data","a","console","log","fetch","headers","body","JSON","stringify","res","ok","json","handleFetch","watchFetchRequest","membersSaga","call","error","put","Error","stack","postFeedback","feedback","err","takeEvery","FETCH_REQUEST","all","fork","FeedbackModel","feedback_entry","useStyles","makeStyles","theme","createStyles","root","width","position","padding","bottom","justifyContent","left","feedBackInput","buttonSuccess","top","backgroundColor","green","buttonIdle","content","display","Height","spacing","mapDispatchToProps","ConnectedFeedbackInput","connect","props","classes","React","success","setSuccess","btnText","setbtnText","feedBackMsg","setfeedBackMsg","loading","setLoading","timer","buttonClassname","clsx","handleButtonClick","submitFeedback","current","setTimeout","className","Box","TextField","label","placeholder","multiline","variant","onChange","e","target","value","length","Button","color","disabled","onClick","EditTable","useState","columns","title","field","lookup","members","state","setState","actions","tooltip","icon","evt","alert","detailPanel","render","rowData","style","fontSize","textAlign","options","filtering","grouping","search","selection","exportButton","editable","onRowAdd","newData","Promise","resolve","prevState","push","onRowUpdate","oldData","indexOf","onRowDelete","splice","height","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","flexDirection","toolbar","alignItems","mixins","ConnectedNavDrawer","useTheme","open","setOpen","alphaTable","showAlphaTable","gainTable","showGainTable","CssBaseline","AppBar","Toolbar","IconButton","aria-label","edge","Typography","noWrap","Drawer","paper","direction","Divider","List","ListItem","button","prev","ListItemIcon","ListItemText","primary","Container","Zoom","in","transitionDelay","component","paddingBottom","right","transform","flexGrow","pointerEvents","speedDial","name","SpeedDialBtn","hidden","handleClose","Backdrop","timeout","SpeedDial","ariaLabel","SpeedDialIcon","onClose","onOpen","SpeedDialAction","key","tooltipTitle","tooltipOpen","MembersIndexPage","fr","membersFetchRequest","errors","Routes","styles","exact","darktheme","createMuiTheme","palette","type","blueGrey","secondary","main","Main","store","history","ThemeProvider","Boolean","window","location","hostname","match","LayoutActionTypes","initialState","reducer","SET_THEME","SquadronActionTypes","undefined","squadronsFetchSuccess","squadronsFetchError","squadronPostSuccess","POST_SUCCESS","squadronSaga","postNewSquadron","FlightActionTypes","squadrons","newInput","showInput","posting","SHOW_INPUT","POST_REQUEST","AETActionTypes","flights","AETs","flightsFetchSuccess","flightsFetchError","flightSaga","AETsFetchSuccess","AETsFetchError","AETSaga","rootSaga","createRootReducer","combineReducers","layout","layoutReducer","squadronsReducer","flightsReducer","AETsReducer","membersReducer","router","connectRouter","createBrowserHistory","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","routerMiddleware","run","configureStore","INITIAL_REDUX_STATE","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3257e188.chunk.js","sourcesContent":["import * as React from 'react';\nimport styled from \"styled-components\";\n\ninterface RootProps {\n    className?: string;\n}\n\nconst Root: React.FC<RootProps> = ({ children }) => <Wrapper>{children}</Wrapper>;\n\nexport default Root;\n\nconst Wrapper = styled('div')`\n`;\n","import { css } from '@emotion/core';\n\nconst normalize = css`\n    /*! modern-normalize | MIT License | https://github.com/sindresorhus/modern-normalize */\n\n    /* Document\n    ========================================================================== */\n\n    /**\n  * Use a better box model (opinionated).\n  */\n\n    html {\n        box-sizing: border-box;\n    }\n\n    *,\n    *::before,\n    *::after {\n        box-sizing: inherit;\n    }\n\n    /**\n  * Use a more readable tab size (opinionated).\n  */\n\n    :root {\n        -moz-tab-size: 4;\n        tab-size: 4;\n    }\n\n    /**\n  * Correct the line height in all browsers.\n  */\n\n    html {\n        line-height: 1.15;\n    }\n\n    /* Sections\n    ========================================================================== */\n\n    /**\n  * Remove the margin in all browsers.\n  */\n\n    body {\n        margin: 0;\n    }\n\n    /**\n  * Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\n  */\n\n    body {\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif,\n            'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\n    }\n\n    /**\n  * Correct the font size and margin on \\`h1\\` elements within \\`section\\` and\n  * \\`article\\` contexts in Chrome, Firefox, and Safari.\n  */\n\n    h1 {\n        font-size: 2em;\n        margin: 0.67em 0;\n    }\n\n    /* Grouping content\n    ========================================================================== */\n\n    /**\n  * Add the correct height in Firefox.\n  */\n\n    hr {\n        height: 0;\n    }\n\n    /* Text-level semantics\n    ========================================================================== */\n\n    /**\n  * Add the correct text decoration in Chrome, Edge, and Safari.\n  */\n\n    abbr[title] {\n        text-decoration: underline dotted;\n    }\n\n    /**\n  * Add the correct font weight in Chrome, Edge, and Safari.\n  */\n\n    b,\n    strong {\n        font-weight: bolder;\n    }\n\n    /**\n  * 1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\n  * 2. Correct the odd \\`em\\` font sizing in all browsers.\n  */\n\n    code,\n    kbd,\n    samp,\n    pre {\n        font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; /* 1 */\n        font-size: 1em; /* 2 */\n    }\n\n    /**\n  * Add the correct font size in all browsers.\n  */\n\n    small {\n        font-size: 80%;\n    }\n\n    /**\n  * Prevent \\`sub\\` and \\`sup\\` elements from affecting the line height in\n  * all browsers.\n  */\n\n    sub,\n    sup {\n        font-size: 75%;\n        line-height: 0;\n        position: relative;\n        vertical-align: baseline;\n    }\n\n    sub {\n        bottom: -0.25em;\n    }\n\n    sup {\n        top: -0.5em;\n    }\n\n    /* Forms\n    ========================================================================== */\n\n    /**\n  * 1. Change the font styles in all browsers.\n  * 2. Remove the margin in Firefox and Safari.\n  */\n\n    button,\n    input,\n    optgroup,\n    select,\n    textarea {\n        font-family: inherit; /* 1 */\n        font-size: 100%; /* 1 */\n        line-height: 1.15; /* 1 */\n        margin: 0; /* 2 */\n    }\n\n    /**\n  * Remove the inheritance of text transform in Edge and Firefox.\n  * 1. Remove the inheritance of text transform in Firefox.\n  */\n\n    button,\n    select {\n        /* 1 */\n        text-transform: none;\n    }\n\n    /**\n  * Correct the inability to style clickable types in iOS and Safari.\n  */\n\n    button,\n    [type='button'],\n    [type='reset'],\n    [type='submit'] {\n        -webkit-appearance: button;\n    }\n\n    /**\n  * Remove the inner border and padding in Firefox.\n  */\n\n    button::-moz-focus-inner,\n    [type='button']::-moz-focus-inner,\n    [type='reset']::-moz-focus-inner,\n    [type='submit']::-moz-focus-inner {\n        border-style: none;\n        padding: 0;\n    }\n\n    /**\n  * Restore the focus styles unset by the previous rule.\n  */\n\n    button:-moz-focusring,\n    [type='button']:-moz-focusring,\n    [type='reset']:-moz-focusring,\n    [type='submit']:-moz-focusring {\n        outline: 1px dotted ButtonText;\n    }\n\n    /**\n  * Correct the padding in Firefox.\n  */\n\n    fieldset {\n        padding: 0.35em 0.75em 0.625em;\n    }\n\n    /**\n  * Remove the padding so developers are not caught out when they zero out\n  *    \\`fieldset\\` elements in all browsers.\n  */\n\n    legend {\n        padding: 0;\n    }\n\n    /**\n  * Add the correct vertical alignment in Chrome and Firefox.\n  */\n\n    progress {\n        vertical-align: baseline;\n    }\n\n    /**\n  * Correct the cursor style of increment and decrement buttons in Chrome.\n  */\n\n    [type='number']::-webkit-inner-spin-button,\n    [type='number']::-webkit-outer-spin-button {\n        height: auto;\n    }\n\n    /**\n  * 1. Correct the odd appearance in Chrome and Safari.\n  * 2. Correct the outline style in Safari.\n  */\n\n    [type='search'] {\n        -webkit-appearance: textfield; /* 1 */\n        outline-offset: -2px; /* 2 */\n    }\n\n    /**\n  * Remove the inner padding in Chrome and Safari on macOS.\n  */\n\n    [type='search']::-webkit-search-decoration {\n        -webkit-appearance: none;\n    }\n\n    /**\n  * 1. Correct the inability to style clickable types in iOS and Safari.\n  * 2. Change font properties to \\`inherit\\` in Safari.\n  */\n\n    ::-webkit-file-upload-button {\n        -webkit-appearance: button; /* 1 */\n        font: inherit; /* 2 */\n    }\n\n    /* Interactive\n    ========================================================================== */\n\n    /*\n  * Add the correct display in Edge and Firefox.\n  */\n\n    details {\n        display: block;\n    }\n\n    /*\n  * Add the correct display in all browsers.\n  */\n\n    summary {\n        display: list-item;\n    }\n`;\n\nexport default normalize;\n","// This file holds our state type, as well as any other types related to this Redux store.\n\n// Response object for GET /members\n\nimport MemberModel from \"./MemberModel\";\n\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\nexport type ApiResponse = Record<string, any>;\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport enum MemberActionTypes {\n    FETCH_REQUEST = '@@members/FETCH_REQUEST',\n    FETCH_SUCCESS = '@@members/FETCH_SUCCESS',\n    FETCH_ERROR = '@@members/FETCH_ERROR',\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface MembersState {\n    readonly loading: boolean;\n    readonly data: MemberModel[];\n    readonly errors?: string;\n}\n","\n\n\nexport default class MemberModel {\n        public id: number;\n        public full_name: string;\n        public grade: string;\n        public assigned_pas: string;\n        public dafsc: string;\n        public office_symbol: string;\n        public duty_title: string;\n        public duty_start_date: string;\n        public duty_phone: string;\n        public awardec_status: string;\n        public epr_opr_status: string;\n\n\n    constructor(id: number, full_name: string, grade: string, assigned_pas: string, dafsc: string, office_symbol: string, duty_title: string, duty_start_date: string, duty_phone: string, awardec_status: string, epr_opr_status: string) {\n        this.id = id;\n        this.full_name = full_name;\n        this.grade = grade;\n        this.assigned_pas = assigned_pas;\n        this.dafsc = dafsc;\n        this.office_symbol = office_symbol;\n        this.duty_title = duty_title;\n        this.duty_start_date = duty_start_date;\n        this.duty_phone = duty_phone;\n        this.awardec_status = awardec_status;\n        this.epr_opr_status = epr_opr_status;\n    }\n}\n\n\n\n","\nimport MemberModel from \"../store/members/MemberModel\";\n\n\nexport class MemberDeserializer {\n  static deserialize(items: any): MemberModel[] {\n    if (items.map) {\n      return items.map((item: any) => {\n        return new MemberModel(\n         item.id,\n            item.full_name,\n            item.grade,\n            item.assigned_pas,\n            item.dafsc,\n            item.office_symbol,\n            item.duty_title,\n            item.duty_start_date,\n            item.duty_phone,\n            item.awardec_status,\n            item.epr_opr_status\n          );\n      });\n    }\n    return [];\n  }\n}\n\n","import { action } from 'typesafe-actions';\nimport { MemberActionTypes} from './types';\nimport MemberModel from \"./MemberModel\";\nimport {MemberDeserializer} from \"../../utils/RfiDeserializer\";\n\n// Here we use the `action` helper function provided by `typesafe-actions`.\n// This library provides really useful helpers for writing Redux actions in a type-safe manner.\n// For more info: https://github.com/piotrwitek/typesafe-actions\nexport const membersFetchRequest = () => action(MemberActionTypes.FETCH_REQUEST);\n\n// Remember, you can also pass parameters into an action creator. Make sure to\n// type them properly as well.\nexport const membersFetchSuccess = (payload: MemberModel[]) => action(\n    MemberActionTypes.FETCH_SUCCESS, MemberDeserializer.deserialize(payload));\nexport const membersFetchError = (message: string) => action(MemberActionTypes.FETCH_ERROR, message);\n","import styled from \"styled-components\";\n\n\nconst Page = styled('div')`\n    display: flex;\n    flex-direction: row;\n    flex: 1 1 auto;\n`;\n\nexport default Page;\n","export async function callApi(method: string, path: string, data?: any) {\n    console.log(\"posting: \" + data);\n    const res = await fetch(`/${path}`, {\n        method,\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    });\n    if (res.ok) {\n        return res.json();\n    }\n}\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { MemberActionTypes } from './types';\nimport { membersFetchError, membersFetchSuccess } from './actions';\nimport { callApi } from '../../utils/api';\nimport FeedbackModel from \"./FeedbackModel\";\n\n\nfunction *handleFetch() {\n    try {\n        // To call async functions, use redux-saga's `call()`.\n        const res = yield call(callApi, 'get', 'api/members');\n\n        if (res.error) {\n            yield put(membersFetchError(res.error));\n        } else {\n            yield put(membersFetchSuccess(res));\n        }\n    } catch (err) {\n        if (err instanceof Error && err.stack) {\n            yield put(membersFetchError(err.stack));\n        } else {\n            yield put(membersFetchError('An unknown error occured.'));\n        }\n    }\n}\n\n\nexport function postFeedback(feedback: FeedbackModel) {\n    try {\n        // To call async functions, use redux-saga's `call()`.\n        callApi( 'POST', 'api/feedback/submit', feedback);\n    } catch (err) {\n        console.log('An unknown error occured.');\n\n    }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction *watchFetchRequest() {\n    yield takeEvery(MemberActionTypes.FETCH_REQUEST, handleFetch);\n}\n\n\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction *membersSaga() {\n    yield all([fork(watchFetchRequest)]);\n}\n\nexport default membersSaga;\n","export default class FeedbackModel {\n    constructor(\n        public feedback_entry: string\n    ) {\n    }\n}","import * as React from 'react';\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {Box, Button, TextField} from \"@material-ui/core\";\nimport {postFeedback} from \"../../../store/members/sagas\";\nimport {connect} from \"react-redux\";\nimport clsx from \"clsx\";\nimport FeedbackModel from \"../../../store/members/FeedbackModel\";\nimport {green} from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n            position: 'fixed',\n            padding: 40,\n            bottom: 0,\n            justifyContent: 'center',\n            left: 40,\n        },\n        feedBackInput: {\n            width: '80%',\n        },\n        buttonSuccess: {\n            width: 120,\n            position: 'relative',\n            top: 12,\n            left: 10,\n            backgroundColor: green[500],\n            '&:hover': {\n                backgroundColor: green[700],\n            },\n        },\n        buttonIdle: {\n            position: 'relative',\n            top: 12,\n            left: 10,\n            width: 120,\n        },\n        content: {\n            display: 'block',\n            Height: '100%',\n            padding: theme.spacing(3),\n        },\n    }),\n);\n\ninterface Props {\n    postFeedback: typeof postFeedback;\n}\n\nconst FeedbackInput: React.FC<Props> = props => {\n    const classes = useStyles();\n    const [success, setSuccess] = React.useState(false);\n    const [btnText, setbtnText] = React.useState(\"SUBMIT\");\n    const [feedBackMsg, setfeedBackMsg] = React.useState(\"\");\n\n    const [loading, setLoading] = React.useState(false);\n    const timer = React.useRef<number>();\n\n    const buttonClassname = clsx({\n        [classes.buttonIdle]: !success,\n        [classes.buttonSuccess]: success,\n    });\n\n    const handleButtonClick = async() => {\n        if (!loading) {\n            setSuccess(false);\n            setLoading(true);\n           await submitFeedback();\n        }\n    };\n\n    const submitFeedback = () => {\n        timer.current = setTimeout(() => {\n            setLoading(false);\n            postFeedback(new FeedbackModel(feedBackMsg));\n            setSuccess(true);\n            setbtnText(\"THANK YOU!\");\n            setfeedBackMsg(\"\")\n        }, 500);\n    };\n\n\n    const handleChange = (e: any) => {\n        if (!loading) {\n            setfeedBackMsg(e.target.value);\n            if (btnText === \"THANK YOU!\") {\n                setbtnText(\"SUBMIT\")\n                setSuccess(false);\n                setLoading(false);\n            }\n        }\n    };\n    return (\n        <div className={classes.root}>\n            <Box width={1} display={'block'} position={'relative'} top={30} bottom={30}>\n                <TextField\n                    id=\"outlined-textarea\"\n                    className={classes.feedBackInput}\n                    label=\"Send Feedback\"\n                    placeholder=\"Enter Feedback here and then click SUBMIT\"\n                    multiline\n                    variant=\"filled\"\n                    onChange={handleChange}\n                    value={feedBackMsg.length === 0 ? \"\" : feedBackMsg}\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={buttonClassname}\n                    disabled={loading}\n                    onClick={handleButtonClick}\n                >\n                    {btnText}\n                </Button>\n            </Box>\n        </div>\n    );\n};\n\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = {\n    postFeedback,\n};\nexport const ConnectedFeedbackInput = connect(mapStateToProps, mapDispatchToProps)(FeedbackInput);","import React from 'react';\nimport MaterialTable, { Column } from 'material-table';\nimport MemberModel from \"../../store/members/MemberModel\";\nimport {Box} from \"@material-ui/core\";\n\ninterface Row {\n     id: number;\n     full_name: string;\n     grade: string;\n     assigned_pas: string;\n     dafsc: string;\n     office_symbol: string;\n     duty_title: string;\n     duty_start_date: string;\n     duty_phone: string;\n     awardec_status: string;\n     epr_opr_status: string;\n}\n\ninterface TableState {\n    columns: Array<Column<Row>>;\n    data: Row[];\n}\n\ninterface Props {\n    members: MemberModel[];\n    title: string;\n}\n\n\nconst EditTable: React.FC<Props> = props => {\n    const [state, setState] = React.useState<TableState>({\n\n        columns: [\n            { title: 'Name', field: 'full_name' },\n            { title: 'Rank', field: 'grade' },\n            { title: 'DAFSC', field: 'dafsc' },\n            { title: 'Office', field: 'office_symbol',\n                lookup: {'DOM': 'DOM', 'SCOI': 'SCOI'}\n                },\n            // {\n            //     title: 'Birth Place',\n            //     field: 'birthCity',\n            //     lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' },\n            // },\n        ],\n        data: props.members,\n    });\n\n\n    return (\n        <Box width={1200}>\n        <MaterialTable\n            title={props.title}\n\n            columns={state.columns}\n            data={state.data}\n            actions={[\n                {\n                    tooltip: 'Remove All Selected Users',\n                    icon: 'delete',\n                    onClick: (evt, data) => alert('You want to delete ' + state.data.length + ' rows')\n                }\n            ]}\n            detailPanel={[\n                {\n                    tooltip: 'Show Tasks',\n                    render: rowData => {\n                        return (\n                            <div\n                                style={{\n                                    fontSize: 100,\n                                    textAlign: 'center',\n                                    color: 'white',\n                                    backgroundColor: '#43A047',\n                                }}\n                            >\n                                {rowData.assigned_pas}\n                            </div>\n                        )\n                    },\n                },\n                // {\n                //     icon: 'account_circle',\n                //     tooltip: 'Show Member Details',\n                //     render: rowData => {\n                //         return (\n                //             <div\n                //                 style={{\n                //                     fontSize: 100,\n                //                     textAlign: 'center',\n                //                     color: 'white',\n                //                     backgroundColor: '#E53935',\n                //                 }}\n                //             >\n                //                 {rowData.duty_title}\n                //             </div>\n                //         )\n                //     },\n                // },\n            ]}\n            options={{\n                filtering: true,\n                grouping: true,\n                search: true,\n                selection: true,\n                exportButton: true,\n                // selectionProps: (rowData: MemberModel) => ({\n                //     disabled: rowData.full_name === 'ABRAMS, JOSEPH L',\n                //     color: 'primary'\n                // })\n            }}\n\n            editable={{\n                onRowAdd: newData =>\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve();\n                            setState(prevState => {\n                                const data = [...prevState.data];\n                                data.push(newData);\n                                return { ...prevState, data };\n                            });\n                        }, 600);\n                    }),\n                onRowUpdate: (newData, oldData) =>\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve();\n                            if (oldData) {\n                                setState(prevState => {\n                                    const data = [...prevState.data];\n                                    data[data.indexOf(oldData)] = newData;\n                                    return { ...prevState, data };\n                                });\n                            }\n                        }, 600);\n                    }),\n                onRowDelete: oldData =>\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve();\n                            setState(prevState => {\n                                const data = [...prevState.data];\n                                data.splice(data.indexOf(oldData), 1);\n                                return { ...prevState, data };\n                            });\n                        }, 600);\n                    }),\n            }}\n        />\n        </Box>\n    );\n};\n\n\nexport default EditTable;\n","import React from 'react';\nimport clsx from 'clsx';\nimport {createStyles, makeStyles, useTheme, Theme} from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport {connect} from \"react-redux\";\nimport {postFeedback} from \"../../store/members/sagas\";\nimport {Box, Container, ListItem, ListItemIcon, ListItemText, Zoom} from \"@material-ui/core\";\nimport MemberModel from \"../../store/members/MemberModel\";\nimport EditTable from \"../table/EditTable\";\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\nimport GroupIcon from '@material-ui/icons/Group';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n            height: '100%',\n            top: 120,\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n            transition: theme.transitions.create(['width', 'margin'], {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen,\n            }),\n        },\n        appBarShift: {\n            marginLeft: drawerWidth,\n            width: `calc(100% - ${drawerWidth}px)`,\n            transition: theme.transitions.create(['width', 'margin'], {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n        },\n        menuButton: {\n            marginRight: 36,\n        },\n        hide: {\n            display: 'none',\n        },\n        drawer: {\n            width: drawerWidth,\n            flexShrink: 0,\n            whiteSpace: 'nowrap',\n        },\n        drawerOpen: {\n            width: drawerWidth,\n            transition: theme.transitions.create('width', {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n        },\n        drawerClose: {\n            transition: theme.transitions.create('width', {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen,\n            }),\n            overflowX: 'hidden',\n            width: theme.spacing(7) + 1,\n            [theme.breakpoints.up('sm')]: {\n                width: theme.spacing(9) + 1,\n            },\n        },\n        content: {\n            display: 'flex',\n            position: 'relative',\n            flexDirection: 'column',\n            justifyContent: 'space around',\n            Height: '100%',\n            padding: theme.spacing(3),\n            top: 80,\n        },\n        toolbar: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'flex-end',\n            padding: theme.spacing(0, 1),\n            ...theme.mixins.toolbar,\n        },\n\n\n    }),\n);\n\ninterface PropsFromState {\n    members: MemberModel[];\n    loading: boolean;\n    className?: string;\n}\n\ninterface PropsFromDispatch {\n    postFeedback: typeof postFeedback;\n}\n\ntype AllProps = PropsFromDispatch & PropsFromState;\n\nconst NavDrawer: React.FC<AllProps> = props => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(false);\n    const [alphaTable, showAlphaTable] = React.useState(false);\n    const [gainTable, showGainTable] = React.useState(false);\n\nconst handleGainBtnClick = () => {\n    showGainTable(prev => !prev)\n};\nconst handleAlphaBtnClick = () => {\n    showAlphaTable(prev => !prev)\n};\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline/>\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, {\n                            [classes.hide]: open,\n                        })}\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        Turbine\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                className={clsx(classes.drawer, {\n                    [classes.drawerOpen]: open,\n                    [classes.drawerClose]: !open,\n                })}\n                classes={{\n                    paper: clsx({\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open,\n                    }),\n                }}\n            >\n                <div className={classes.toolbar}>\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === 'rtl' ? <ChevronRightIcon/> : <ChevronLeftIcon/>}\n                    </IconButton>\n                </div>\n                <Divider/>\n                <List>\n                    {/*<ListItem button>*/}\n                    {/*    <ListItemIcon>{<FiberNewIcon/>}</ListItemIcon>*/}\n                    {/*    <ListItemText primary=\"Members\"/>*/}\n                    {/*</ListItem>*/}\n                    <ListItem button onClick={handleGainBtnClick}>\n                        <ListItemIcon>{<GroupAddIcon/>}</ListItemIcon>\n                        <ListItemText primary=\"In Processing\"/>\n                    </ListItem>\n                    <ListItem button onClick={handleAlphaBtnClick}>\n                        <ListItemIcon>{<GroupIcon/>}</ListItemIcon>\n                        <ListItemText primary=\"Alpha Roster\"/>\n                    </ListItem>\n                    {/*{['Members', 'Starred', 'Send email', 'Drafts'].map((text, index) => (*/}\n                    {/*    <ListItem button key={text}>*/}\n                    {/*        <ListItemIcon>{index % 2 === 0 ? <InboxIcon/> : <MailIcon/>}</ListItemIcon>*/}\n                    {/*        <ListItemText primary={text}/>*/}\n                    {/*    </ListItem>*/}\n                    {/*))}*/}\n                </List>\n                <Divider/>\n                {/*<List>*/}\n                {/*    {['All mail', 'Trash', 'Spam'].map((text, index) => (*/}\n                {/*        <ListItem button key={text}>*/}\n                {/*            <ListItemIcon>{index % 2 === 0 ? <InboxIcon/> : <MailIcon/>}</ListItemIcon>*/}\n                {/*            <ListItemText primary={text}/>*/}\n                {/*        </ListItem>*/}\n                {/*    ))}*/}\n                {/*</List>*/}\n            </Drawer>\n            <Container className={classes.content}>\n            <Box display={'flex'} flexDirection={'column'} justifyContent={'space-around'}  >\n            {gainTable &&\n                <Zoom in={gainTable} style={{ transitionDelay: gainTable ? '100ms' : '0ms' }} >\n                    <Box component={'div'} paddingBottom={10} >\n                        <EditTable members={props.members} title={\"In Processing\"}/>\n                    </Box>\n                </Zoom>\n            }\n            {alphaTable &&\n            <Zoom in={alphaTable} style={{ transitionDelay: alphaTable ? '100ms' : '0ms' }} >\n                <Box component={'div'} paddingBottom={10}>\n                    <EditTable members={props.members} title={\"Alpha Roster\"}/>\n                </Box>\n            </Zoom>\n            }\n            </Box>\n            </Container>\n        </div>\n    );\n};\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = {\n    postFeedback,\n};\nexport const ConnectedNavDrawer = connect(mapStateToProps, mapDispatchToProps)(NavDrawer);\n\n\n\n\n\n","import * as React from 'react';\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport FileCopyIcon from '@material-ui/icons/FileCopyOutlined';\nimport SaveIcon from '@material-ui/icons/Save';\n\ninterface Props {\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            position: \"fixed\",\n            bottom: 0,\n            right: 0,\n            width: '100vw',\n            height: '100vh',\n            transform: 'translateZ(0px)',\n            flexGrow: 1,\n            zIndex: 1000,\n            pointerEvents: 'none',\n        },\n        speedDial: {\n            position: 'absolute',\n            bottom: theme.spacing(2),\n            right: theme.spacing(2),\n        },\n    }),\n);\n\nconst actions = [\n    { icon: <FileCopyIcon />, name: 'Upload' },\n    { icon: <SaveIcon />, name: 'Task' },\n];\n\nconst SpeedDialBtn: React.FC<Props> = props => {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const [hidden] = React.useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            {/*<Button onClick={handleVisibility}>Toggle Speed Dial</Button>*/}\n            <Backdrop open={open}  timeout={10}/>\n            <SpeedDial\n                ariaLabel=\"SpeedDial tooltip example\"\n                className={classes.speedDial}\n                hidden={hidden}\n                icon={<SpeedDialIcon />}\n                onClose={handleClose}\n                onOpen={handleOpen}\n                open={open}\n            >\n                {actions.map(action => (\n                    <SpeedDialAction\n                        key={action.name}\n                        icon={action.icon}\n                        tooltipTitle={action.name}\n                        tooltipOpen\n                        onClick={handleClose}\n                        title={'Member Actions'}/>\n                ))}\n            </SpeedDial>\n        </div>\n    );\n};\n\nexport default SpeedDialBtn;","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ApplicationState } from '../../store';\nimport {membersFetchRequest} from '../../store/members/actions';\nimport MemberModel from \"../../store/members/MemberModel\";\nimport Page from \"../../components/layout/Page\";\nimport {ConnectedFeedbackInput} from \"../../components/layout/input/Feedback\";\nimport {ConnectedNavDrawer} from \"../../components/layout/NavDrawer\";\nimport SpeedDialBtn from \"../../components/layout/button/SpeedDialBtn\";\n\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n    loading: boolean;\n    members: MemberModel[];\n    errors?: string;\n}\n\n// We can use `typeof` here to map our dispatch types to the props, like so.\ninterface PropsFromDispatch {\n    membersFetchRequest: typeof membersFetchRequest;\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & PropsFromDispatch;\n\nclass MembersIndexPage extends React.Component<AllProps> {\n    public componentDidMount() {\n        const { membersFetchRequest: fr } = this.props;\n        fr();\n    }\n\n    public render() {\n        const { members, loading } = this.props;\n\n        return (\n            <Page\n            className=\"MembersPage\">\n                <ConnectedNavDrawer members={members} loading={loading}/>\n                <ConnectedFeedbackInput/>\n                <SpeedDialBtn\n                />\n            </Page>\n        );\n    }\n}\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ members }: ApplicationState) => ({\n    loading: members.loading,\n    errors: members.errors,\n    members: members.data,\n});\n\n// mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\nconst mapDispatchToProps = {\n    membersFetchRequest,\n};\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(MembersIndexPage);\n\n\n\n\n","import * as React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport { Global } from '@emotion/core'\nimport Root from './components/layout/Root'\nimport normalize from './styles/normalize'\nimport MembersIndexPage from \"./pages/members/index\";\n\n// If your app is big + you have routes with a lot of components, you should consider\n// code-splitting your routes! If you bundle stuff up with Webpack, I recommend `react-loadable`.\n//\n// $ yarn add react-loadable\n// $ yarn add --dev @types/react-loadable\n//\n// The given `pages/` directory provides an example of a directory structure that's easily\n// code-splittable.\n\n\nconst Routes: React.FC = () => (\n    <Root>\n        <Global styles={normalize} />\n        <Switch>\n            <Route exact path=\"/\" component={MembersIndexPage} />\n            {/*<Route path=\"/members\" component={MembersIndexPage} />*/}\n        </Switch>\n    </Root>\n\n)\n\nexport default Routes","\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport {blueGrey} from \"@material-ui/core/colors\";\n\nexport const darktheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: blueGrey,\n        secondary: {\n            main: '#E5E5E0',\n        },\n    },\n});\n","import * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Store } from 'redux';\nimport { History } from 'history';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Routes from './routes';\nimport { ApplicationState } from './store';\nimport {darktheme} from \"./styles/theme/dark\";\n\n// Any additional component props go here.\ninterface MainProps {\n    store: Store<ApplicationState>;\n    history: History;\n}\n// Create an intersection type of the component props and our Redux props.\nconst Main: React.FC<MainProps> = ({ store, history }) => {\n    return (\n        <ThemeProvider theme={darktheme}>\n        <Provider store={store}>\n            <ConnectedRouter history={history}>\n                            <Routes />\n            </ConnectedRouter>\n        </Provider>\n        </ThemeProvider>\n    );\n};\n\n// Normally you wouldn't need any generics here (since types infer from the passed functions).\n// But since we pass some props from the `index.js` file, we have to include them.\n// For an example of a `connect` function without generics, see `./containers/LayoutContainer`.\nexport default Main;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Example for using discriminated union types.\nexport type ThemeColors = 'light' | 'dark';\n\n// Use enums for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport enum LayoutActionTypes {\n    SET_THEME = '@@layout/SET_THEME',\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface LayoutState {\n    readonly theme: ThemeColors;\n}\n","import { Reducer } from 'redux';\nimport { LayoutState, LayoutActionTypes } from './types';\n\n// Type-safe initialState!\nexport const initialState: LayoutState = {\n    theme: 'dark',\n};\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<LayoutState> = (state = initialState, action) => {\n    switch (action.type) {\n        case LayoutActionTypes.SET_THEME: {\n            return { ...state, theme: action.payload };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as layoutReducer };\n","import { Reducer } from 'redux';\nimport { MembersState, MemberActionTypes } from './types';\nimport MemberModel from \"./MemberModel\";\n\n// Type-safe initialState!\nexport const initialState: MembersState = {\n    data: [] as MemberModel[],\n    errors: undefined,\n    loading: false,\n};\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<MembersState> = (state = initialState, action) => {\n    switch (action.type) {\n        case MemberActionTypes.FETCH_REQUEST: {\n            return {\n                ...state,\n                loading: true\n            };\n        }\n        case MemberActionTypes.FETCH_SUCCESS: {\n            return { ...state, loading: false, data: action.payload };\n        }\n        case MemberActionTypes.FETCH_ERROR: {\n            return { ...state, loading: false, errors: action.payload };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as membersReducer };\n","\n\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nimport SquadronModel from \"./SquadronModel\";\n\nexport enum SquadronActionTypes {\n    FETCH_REQUEST = '@@squadrons/FETCH_REQUEST',\n    FETCH_SUCCESS = '@@squadrons/FETCH_SUCCESS',\n    FETCH_ERROR = '@@squadrons/FETCH_ERROR',\n    POST_REQUEST = '@@squadrons/POST_REQUEST',\n    POST_SUCCESS = '@@squadrons/POST_SUCCESS',\n    POST_ERROR = '@@squadrons/POST_ERROR',\n    SHOW_INPUT = '@@squadrons/SHOW_INPUT',\n    UPDATE_INPUT = '@@squadrons/UPDATE_INPUT'\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface SquadronsState {\n    readonly loading: boolean;\n    readonly squadrons: SquadronModel[];\n    readonly showInput: boolean;\n    readonly newInput: SquadronModel | undefined;\n    readonly posting: boolean;\n    readonly errors?: string;\n}\n","import { action } from 'typesafe-actions';\nimport { SquadronActionTypes} from './types';\nimport SquadronModel from \"./SquadronModel\";\n\n// Here we use the `action` helper function provided by `typesafe-actions`.\n// This library provides really useful helpers for writing Redux actions in a type-safe manner.\n// For more info: https://github.com/piotrwitek/typesafe-actions\n\n// Remember, you can also pass parameters into an action creator. Make sure to\n// type them properly as well.\nexport const squadronsFetchRequest = () => action(SquadronActionTypes.FETCH_REQUEST);\nexport const squadronsFetchSuccess = (payload: SquadronModel[]) => action(SquadronActionTypes.FETCH_SUCCESS, payload);\nexport const squadronsFetchError = (message: string) => action(SquadronActionTypes.FETCH_ERROR, message);\n\nexport const squadronPostRequest = (data: SquadronModel) => action(SquadronActionTypes.POST_REQUEST, data);\nexport const squadronPostSuccess = () => action(SquadronActionTypes.POST_SUCCESS);\nexport const squadronPostError = (message: string) => action(SquadronActionTypes.POST_ERROR, message);\n\nexport const showSquadronInput = () => action(SquadronActionTypes.SHOW_INPUT);\nexport const updateSquadronInputState = (data: SquadronModel) => action(SquadronActionTypes.UPDATE_INPUT, data);\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { SquadronActionTypes } from './types';\nimport { squadronPostSuccess, squadronsFetchError, squadronsFetchSuccess} from './actions';\nimport { callApi } from '../../utils/api';\nimport SquadronModel from \"./SquadronModel\";\n\n\nfunction *handleFetch() {\n    try {\n        // To call async functions, use redux-saga's `call()`.\n        const res = yield call(callApi, 'get', 'api/squadrons');\n\n        if (res.error) {\n            yield put(squadronsFetchError(res.error));\n        } else {\n            yield put(squadronsFetchSuccess(res));\n        }\n    } catch (err) {\n        if (err instanceof Error && err.stack) {\n            yield put(squadronsFetchError(err.stack));\n        } else {\n            yield put(squadronsFetchError('An unknown error occured.'));\n        }\n    }\n}\n\nexport async function postNewSquadron(data: SquadronModel) {\n        // To call async functions, use redux-saga's `call()`.\n        const res = await callApi('post', 'api/squadrons/add', data);\n    if (await res.json) {\n        squadronPostSuccess();\n    }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction *watchFetchRequest() {\n    yield takeEvery(SquadronActionTypes.FETCH_REQUEST, handleFetch);\n}\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction *squadronSaga() {\n    yield all([fork(watchFetchRequest)]);\n}\n\nexport default squadronSaga;","import { Reducer } from 'redux';\nimport { SquadronsState, SquadronActionTypes } from './types';\nimport SquadronModel from \"./SquadronModel\";\nimport {postNewSquadron} from \"./sagas\";\n\n// Type-safe initialState!\nexport const initialState: SquadronsState = {\n    squadrons: [] as SquadronModel[],\n    newInput: {} as SquadronModel,\n    errors: undefined,\n    loading: false,\n    showInput: false,\n    posting: false,\n};\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<SquadronsState> = (state = initialState, action) => {\n    switch (action.type) {\n        case SquadronActionTypes.FETCH_REQUEST: {\n            return {\n                ...state,\n                loading: true\n            };\n        }\n        case SquadronActionTypes.FETCH_SUCCESS: {\n            return { ...state, loading: false, squadrons: action.payload };\n        }\n        case SquadronActionTypes.FETCH_ERROR: {\n            return { ...state, loading: false, errors: action.payload };\n        }\n        case SquadronActionTypes.SHOW_INPUT: {\n            return {\n                ...state,\n                showInput: !state.showInput\n            };\n        }\n        case SquadronActionTypes.POST_REQUEST: {\n            postNewSquadron(action.payload);\n            return {\n                ...state,\n                posting: true\n            };\n        }\n        case SquadronActionTypes.POST_SUCCESS: {\n            return {\n                ...state,\n                showInput: false,\n                posting: false\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as squadronsReducer };","\n\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nimport FlightModel from \"./FlightModel\";\n\nexport enum FlightActionTypes {\n    FETCH_REQUEST = '@@flights/FETCH_REQUEST',\n    FETCH_SUCCESS = '@@flights/FETCH_SUCCESS',\n    FETCH_ERROR = '@@flights/FETCH_ERROR',\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface FlightsState {\n    readonly loading: boolean;\n    readonly flights: FlightModel[];\n    readonly errors?: string;\n}\n","import { Reducer } from 'redux';\nimport { FlightsState, FlightActionTypes } from './types';\nimport FlightModel from \"./FlightModel\";\n\n// Type-safe initialState!\nexport const initialState: FlightsState = {\n    flights: [] as FlightModel[],\n    errors: undefined,\n    loading: false,\n};\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<FlightsState> = (state = initialState, action) => {\n    switch (action.type) {\n        case FlightActionTypes.FETCH_REQUEST: {\n            return {\n                ...state,\n                loading: true\n            };\n        }\n        case FlightActionTypes.FETCH_SUCCESS: {\n            return { ...state, loading: false, flights: action.payload };\n        }\n        case FlightActionTypes.FETCH_ERROR: {\n            return { ...state, loading: false, errors: action.payload };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as flightsReducer };","\n\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nimport AETModel from \"./AETModel\";\n\nexport enum AETActionTypes {\n    FETCH_REQUEST = '@@AETs/FETCH_REQUEST',\n    FETCH_SUCCESS = '@@AETs/FETCH_SUCCESS',\n    FETCH_ERROR = '@@AETs/FETCH_ERROR',\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface AETsState {\n    readonly loading: boolean;\n    readonly AETs: AETModel[];\n    readonly errors?: string;\n}\n","import { Reducer } from 'redux';\nimport { AETsState, AETActionTypes } from './types';\nimport AETModel from \"./AETModel\";\n\n// Type-safe initialState!\nexport const initialState: AETsState = {\n    AETs: [] as AETModel[],\n    errors: undefined,\n    loading: false,\n};\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<AETsState> = (state = initialState, action) => {\n    switch (action.type) {\n        case AETActionTypes.FETCH_REQUEST: {\n            return {\n                ...state,\n                loading: true\n            };\n        }\n        case AETActionTypes.FETCH_SUCCESS: {\n            return { ...state, loading: false, AETs: action.payload };\n        }\n        case AETActionTypes.FETCH_ERROR: {\n            return { ...state, loading: false, errors: action.payload };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as AETsReducer };","import { action } from 'typesafe-actions';\nimport { FlightActionTypes} from './types';\nimport FlightModel from \"./FlightModel\";\n\n// Here we use the `action` helper function provided by `typesafe-actions`.\n// This library provides really useful helpers for writing Redux actions in a type-safe manner.\n// For more info: https://github.com/piotrwitek/typesafe-actions\nexport const flightsFetchRequest = () => action(FlightActionTypes.FETCH_REQUEST);\n\n// Remember, you can also pass parameters into an action creator. Make sure to\n// type them properly as well.\nexport const flightsFetchSuccess = (payload: FlightModel[]) => action(FlightActionTypes.FETCH_SUCCESS, payload);\nexport const flightsFetchError = (message: string) => action(FlightActionTypes.FETCH_ERROR, message);\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { FlightActionTypes } from './types';\nimport { flightsFetchError, flightsFetchSuccess } from './actions';\nimport { callApi } from '../../utils/api';\n\n\nfunction *handleFetch() {\n    try {\n        // To call async functions, use redux-saga's `call()`.\n        const res = yield call(callApi, 'get', 'api/flights');\n\n        if (res.error) {\n            yield put(flightsFetchError(res.error));\n        } else {\n            yield put(flightsFetchSuccess(res));\n        }\n    } catch (err) {\n        if (err instanceof Error && err.stack) {\n            yield put(flightsFetchError(err.stack));\n        } else {\n            yield put(flightsFetchError('An unknown error occured.'));\n        }\n    }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction *watchFetchRequest() {\n    yield takeEvery(FlightActionTypes.FETCH_REQUEST, handleFetch);\n}\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction *flightSaga() {\n    yield all([fork(watchFetchRequest)]);\n}\n\nexport default flightSaga;","import { action } from 'typesafe-actions';\nimport { AETActionTypes} from './types';\nimport AETModel from \"./AETModel\";\n\n// Here we use the `action` helper function provided by `typesafe-actions`.\n// This library provides really useful helpers for writing Redux actions in a type-safe manner.\n// For more info: https://github.com/piotrwitek/typesafe-actions\nexport const AETsFetchRequest = () => action(AETActionTypes.FETCH_REQUEST);\n\n// Remember, you can also pass parameters into an action creator. Make sure to\n// type them properly as well.\nexport const AETsFetchSuccess = (payload: AETModel[]) => action(AETActionTypes.FETCH_SUCCESS, payload);\nexport const AETsFetchError = (message: string) => action(AETActionTypes.FETCH_ERROR, message);\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { AETActionTypes } from './types';\nimport { AETsFetchError, AETsFetchSuccess } from './actions';\nimport { callApi } from '../../utils/api';\n\nfunction *handleFetch() {\n    try {\n        // To call async functions, use redux-saga's `call()`.\n        const res = yield call(callApi, 'get','api/AETs');\n\n        if (res.error) {\n            yield put(AETsFetchError(res.error));\n        } else {\n            yield put(AETsFetchSuccess(res));\n        }\n    } catch (err) {\n        if (err instanceof Error && err.stack) {\n            yield put(AETsFetchError(err.stack));\n        } else {\n            yield put(AETsFetchError('An unknown error occured.'));\n        }\n    }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction *watchFetchRequest() {\n    yield takeEvery(AETActionTypes.FETCH_REQUEST, handleFetch);\n}\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction *AETSaga() {\n    yield all([fork(watchFetchRequest)]);\n}\n\nexport default AETSaga;","import { combineReducers } from 'redux';\nimport { all, fork } from 'redux-saga/effects';\nimport { connectRouter, RouterState } from 'connected-react-router';\nimport { History } from 'history';\n\nimport { LayoutState, layoutReducer } from './layout';\n\nimport membersSaga from './members/sagas';\nimport { membersReducer } from './members/reducer';\nimport { MembersState } from './members/types';\nimport { SquadronsState } from \"./squadrons/types\";\nimport { squadronsReducer } from \"./squadrons/reducer\";\nimport squadronSaga from \"./squadrons/sagas\";\nimport {FlightsState} from \"./flights/types\";\nimport {AETsState} from \"./AETs/types\";\nimport {flightsReducer} from \"./flights/reducer\";\nimport {AETsReducer} from \"./AETs/reducer\";\nimport flightSaga from \"./flights/sagas\";\nimport AETSaga from \"./AETs/sagas\";\n\n// The top-level state object\nexport interface ApplicationState {\n    layout: LayoutState;\n    members: MembersState;\n    squadrons: SquadronsState;\n    flights: FlightsState;\n    AETs: AETsState;\n    router: RouterState;\n}\n\n// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport const createRootReducer = (history: History) =>\n    combineReducers({\n        layout: layoutReducer,\n        squadrons: squadronsReducer,\n        flights: flightsReducer,\n        AETs: AETsReducer,\n        members: membersReducer,\n        router: connectRouter(history),\n    });\n\n// Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\nexport function* rootSaga() {\n    yield all([fork(membersSaga),fork(squadronSaga),fork(flightSaga), fork(AETSaga)]);\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { createBrowserHistory } from 'history';\nimport './index.scss';\n\nimport Main from './main';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './configureStore';\n\nimport 'typeface-ibm-plex-sans';\n\n// We use hash history because this example is going to be hosted statically.\n// Normally you would use browser history.\nconst history = createBrowserHistory();\n\nconst initialState = window.INITIAL_REDUX_STATE;\nconst store = configureStore(history, initialState);\n\nReactDOM.render(<Main store={store} history={history} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { Store, createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n// `react-router-redux` is deprecated, so we use `connected-react-router`.\n// This provides a Redux middleware which connects to our `react-router` instance.\nimport { routerMiddleware } from 'connected-react-router';\n// We'll be using Redux Devtools. We can use the `composeWithDevTools()`\n// directive so we can pass our middleware along with it\nimport { composeWithDevTools } from 'redux-devtools-extension';\n// If you use react-router, don't forget to pass in your history type.\nimport { History } from 'history';\n\n// Import the state interface and our combined reducers/sagas.\nimport { ApplicationState, createRootReducer, rootSaga } from './store';\n\nexport default function configureStore(history: History, initialState: ApplicationState): Store<ApplicationState> {\n    // create the composing function for our middlewares\n    const composeEnhancers = composeWithDevTools({});\n    // create the redux-saga middleware\n    const sagaMiddleware = createSagaMiddleware();\n\n    // We'll create our store with the combined reducers/sagas, and the initial Redux state that\n    // we'll be passing from our entry point.\n    const store = createStore(\n        createRootReducer(history),\n        initialState,\n        composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware)),\n    );\n\n    // Don't forget to run the root saga, and return the store object.\n    sagaMiddleware.run(rootSaga);\n    return store;\n}\n"],"sourceRoot":""}