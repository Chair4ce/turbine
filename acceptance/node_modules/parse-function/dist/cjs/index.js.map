{"version":3,"file":"index.js","sources":["../../node_modules/arrify/index.js","../../src/utils.js","../../src/plugins/body.js","../../src/plugins/props.js","../../src/plugins/params.js","../../src/plugins/initial.js","../../src/index.js"],"sourcesContent":["'use strict';\n\nconst arrify = value => {\n\tif (value === null || value === undefined) {\n\t\treturn [];\n\t}\n\n\tif (Array.isArray(value)) {\n\t\treturn value;\n\t}\n\n\tif (typeof value === 'string') {\n\t\treturn [value];\n\t}\n\n\tif (typeof value[Symbol.iterator] === 'function') {\n\t\treturn [...value];\n\t}\n\n\treturn [value];\n};\n\nmodule.exports = arrify;\n","/* eslint-disable no-param-reassign */\nimport arrayify from 'arrify';\nimport { parseExpression } from '@babel/parser';\n\nconst utils = {};\n\nutils.arrayify = arrayify;\n\n/**\n * > Create default result object,\n * and normalize incoming arguments.\n *\n * @param  {Function|String} code\n * @return {Object} result\n * @private\n */\nutils.setDefaults = function setDefaults(code) {\n  const result = {\n    name: null,\n    body: '',\n    args: [],\n    params: '',\n  };\n\n  if (typeof code === 'function') {\n    code = code.toString('utf8');\n  }\n\n  // makes result.isValid === false\n  if (typeof code !== 'string') {\n    code = '';\n  }\n\n  return utils.setHiddenDefaults(result, code || '');\n};\n\n/**\n * > Create hidden properties into\n * the result object.\n *\n * @param  {Object} result\n * @param  {Function|String} code\n * @return {Object} result\n * @private\n */\nutils.setHiddenDefaults = function setHiddenDefaults(result, code) {\n  result.defaults = {};\n  result.value = code;\n  result.isValid = code.length > 0;\n  result.isArrow = false;\n  result.isAsync = false;\n  result.isNamed = false;\n  result.isAnonymous = false;\n  result.isGenerator = false;\n  result.isExpression = false;\n\n  return result;\n};\n\n/**\n * > Get needed AST tree, depending on what\n * parse method is used.\n *\n * @param  {Object} result\n * @param  {Object} opts\n * @return {Object} node\n * @private\n */\nutils.getNode = function getNode(result, opts) {\n  if (typeof opts.parse === 'function') {\n    result.value = `(${result.value})`;\n\n    const ast = opts.parse(result.value, opts);\n    const body = (ast.program && ast.program.body) || ast.body;\n\n    return body[0].expression;\n  }\n\n  return parseExpression(result.value, opts);\n};\n\nexport default utils;\n","/* eslint-disable no-param-reassign, unicorn/consistent-function-scoping */\n\n/**\n * > Micro plugin to get the raw body, without the\n * surrounding curly braces. It also preserves\n * the whitespaces and newlines - they are original.\n *\n * @param  {Object} node\n * @param  {Object} result\n * @return {Object} result\n * @private\n */\nexport default () => (node, result) => {\n  result.body = result.value.slice(node.body.start, node.body.end);\n\n  const openCurly = result.body.charCodeAt(0) === 123;\n  const closeCurly = result.body.charCodeAt(result.body.length - 1) === 125;\n\n  if (openCurly && closeCurly) {\n    result.body = result.body.slice(1, -1);\n  }\n\n  return result;\n};\n","/* eslint-disable no-param-reassign */\n/**\n * > Set couple of hidden properties and\n * the name of the given function to\n * the returned result object. Notice that\n * if function is called \"anonymous\" then\n * the `result.isAnonymous` would be `false`, because\n * in reality it is named function. It would be `true`\n * only when function is really anonymous and don't have\n * any name.\n *\n * @param  {Object} node\n * @param  {Object} result\n * @return {Object} result\n * @private\n */\n// eslint-disable-next-line unicorn/consistent-function-scoping\nexport default () => (node, result) => {\n  result.isArrow = node.type.startsWith('Arrow');\n  result.isAsync = node.async || false;\n  result.isGenerator = node.generator || false;\n  result.isExpression = node.expression || false;\n  result.isAnonymous = node.id === null;\n  result.isNamed = !result.isAnonymous;\n\n  // if real anonymous -> set to null,\n  // notice that you can name you function `anonymous`, haha\n  // and it won't be \"real\" anonymous, so `isAnonymous` will be `false`\n\n  result.name = result.isAnonymous ? null : node.id.name;\n\n  return result;\n};\n","/* eslint-disable no-param-reassign, unicorn/consistent-function-scoping */\n\n/**\n * > Micro plugin to visit each of the params\n * in the given function and collect them into\n * an `result.args` array and `result.params` string.\n *\n * @param  {Object} node\n * @param  {Object} result\n * @return {Object} result\n * @private\n */\nexport default () => (node, result) => {\n  node.params.forEach((param) => {\n    const defaultArgsName =\n      param.type === 'AssignmentPattern' && param.left && param.left.name;\n\n    const restArgName =\n      param.type === 'RestElement' && param.argument && param.argument.name;\n\n    const name = param.name || defaultArgsName || restArgName;\n\n    result.args.push(name);\n\n    if (param.right && param.right.type === 'SequenceExpression') {\n      const lastExpression = param.right.expressions.pop();\n\n      result.defaults[name] = result.value.slice(\n        lastExpression.start,\n        lastExpression.end,\n      );\n    } else {\n      result.defaults[name] = param.right\n        ? result.value.slice(param.right.start, param.right.end)\n        : undefined;\n    }\n  });\n  result.params = result.args.join(', ');\n\n  return result;\n};\n","/* eslint-disable no-param-reassign */\n\nimport body from './body';\nimport props from './props';\nimport params from './params';\n\n/**\n * > Default plugin that handles regular functions,\n * arrow functions, generator functions\n * and ES6 object method notation.\n *\n * @param  {Object} node\n * @param  {Object} result\n * @return {Object} resul\n * @private\n */\nexport default (app) => (node, result) => {\n  const isFn = node.type.endsWith('FunctionExpression');\n  const isMethod = node.type === 'ObjectExpression';\n\n  /* istanbul ignore next */\n  if (!isFn && !isMethod) {\n    return;\n  }\n\n  node = isMethod ? node.properties[0] : node;\n  node.id = isMethod ? node.key : node.id;\n\n  // babylon node.properties[0] is `ObjectMethod` that has `params` and `body`;\n  // acorn node.properties[0] is `Property` that has `value`;\n  if (node.type === 'Property') {\n    const id = node.key;\n    node = node.value;\n    node.id = id;\n  }\n\n  result = props(app)(node, result);\n  result = params(app)(node, result);\n  result = body(app)(node, result);\n\n  // eslint-disable-next-line consistent-return\n  return result;\n};\n","/**\n * Utilities\n */\n\nimport utils from './utils';\n\n/**\n * Core plugins\n */\n\nimport initial from './plugins/initial';\n\n/**\n * > Initializes with optional `opts` object which is passed directly\n * to the desired parser and returns an object\n * with `.use` and `.parse` methods. The default parse which\n * is used is [babylon][]'s `.parseExpression` method from `v7`.\n *\n * ```js\n * const parseFunction = require('parse-function')\n *\n * const app = parseFunction({\n *   ecmaVersion: 2017\n * })\n *\n * const fixtureFn = (a, b, c) => {\n *   a = b + c\n *   return a + 2\n * }\n *\n * const result = app.parse(fixtureFn)\n * console.log(result)\n *\n * // see more\n * console.log(result.name) // => null\n * console.log(result.isNamed) // => false\n * console.log(result.isArrow) // => true\n * console.log(result.isAnonymous) // => true\n *\n * // array of names of the arguments\n * console.log(result.args) // => ['a', 'b', 'c']\n *\n * // comma-separated names of the arguments\n * console.log(result.params) // => 'a, b, c'\n * ```\n *\n * @param  {Object} `opts` optional, merged with options passed to `.parse` method\n * @return {Object} `app` object with `.use` and `.parse` methods\n * @name  parseFunction\n * @api public\n */\nexport default function parseFunction(opts = {}) {\n  const plugins = [];\n  const app = {\n    /**\n     * > Parse a given `code` and returns a `result` object\n     * with useful properties - such as `name`, `body` and `args`.\n     * By default it uses Babylon parser, but you can switch it by\n     * passing `options.parse` - for example `options.parse: acorn.parse`.\n     * In the below example will show how to use `acorn` parser, instead\n     * of the default one.\n     *\n     * ```js\n     * const acorn = require('acorn')\n     * const parseFn = require('parse-function')\n     * const app = parseFn()\n     *\n     * const fn = function foo (bar, baz) { return bar * baz }\n     * const result = app.parse(fn, {\n     *   parse: acorn.parse,\n     *   ecmaVersion: 2017\n     * })\n     *\n     * console.log(result.name) // => 'foo'\n     * console.log(result.args) // => ['bar', 'baz']\n     * console.log(result.body) // => ' return bar * baz '\n     * console.log(result.isNamed) // => true\n     * console.log(result.isArrow) // => false\n     * console.log(result.isAnonymous) // => false\n     * console.log(result.isGenerator) // => false\n     * ```\n     *\n     * @param  {Function|String} `code` any kind of function or string to be parsed\n     * @param  {Object} `options` directly passed to the parser - babylon, acorn, espree\n     * @param  {Function} `options.parse` by default `babylon.parseExpression`,\n     *                                    all `options` are passed as second argument\n     *                                    to that provided function\n     * @return {Object} `result` see [result section](#result) for more info\n     * @name   .parse\n     * @api public\n     */\n    parse(code, options) {\n      const result = utils.setDefaults(code);\n\n      if (!result.isValid) {\n        return result;\n      }\n\n      const mergedOptions = { ...opts, ...options };\n\n      const isFunction = result.value.startsWith('function');\n      const isAsyncFn = result.value.startsWith('async function');\n      const isAsync = result.value.startsWith('async');\n      const isArrow = result.value.includes('=>');\n      const isAsyncArrow = isAsync && isArrow;\n\n      const isMethod = /^\\*?.+\\([\\s\\S\\w\\W]*\\)\\s*\\{/i.test(result.value);\n\n      if (!(isFunction || isAsyncFn || isAsyncArrow) && isMethod) {\n        result.value = `{ ${result.value} }`;\n      }\n\n      const node = utils.getNode(result, mergedOptions);\n      return plugins.reduce((res, fn) => fn(node, res) || res, result);\n    },\n\n    /**\n     * > Add a plugin `fn` function for extending the API or working on the\n     * AST nodes. The `fn` is immediately invoked and passed\n     * with `app` argument which is instance of `parseFunction()` call.\n     * That `fn` may return another function that\n     * accepts `(node, result)` signature, where `node` is an AST node\n     * and `result` is an object which will be returned [result](#result)\n     * from the `.parse` method. This retuned function is called on each\n     * node only when `.parse` method is called.\n     *\n     * _See [Plugins Architecture](#plugins-architecture) section._\n     *\n     * ```js\n     * // plugin extending the `app`\n     * app.use((app) => {\n     *   app.define(app, 'hello', (place) => `Hello ${place}!`)\n     * })\n     *\n     * const hi = app.hello('World')\n     * console.log(hi) // => 'Hello World!'\n     *\n     * // or plugin that works on AST nodes\n     * app.use((app) => (node, result) => {\n     *   if (node.type === 'ArrowFunctionExpression') {\n     *     result.thatIsArrow = true\n     *   }\n     *   return result\n     * })\n     *\n     * const result = app.parse((a, b) => (a + b + 123))\n     * console.log(result.name) // => null\n     * console.log(result.isArrow) // => true\n     * console.log(result.thatIsArrow) // => true\n     *\n     * const result = app.parse(function foo () { return 123 })\n     * console.log(result.name) // => 'foo'\n     * console.log(result.isArrow) // => false\n     * console.log(result.thatIsArrow) // => undefined\n     * ```\n     *\n     * @param  {Function} `fn` plugin to be called\n     * @return {Object} `app` instance for chaining\n     * @name  .use\n     * @api public\n     */\n    use(fn) {\n      const ret = fn(app);\n      if (typeof ret === 'function') {\n        plugins.push(ret);\n      }\n      return app;\n    },\n\n    /**\n     * > Define a non-enumerable property on an object. Just\n     * a convenience mirror of the [define-property][] library,\n     * so check out its docs. Useful to be used in plugins.\n     *\n     * ```js\n     * const parseFunction = require('parse-function')\n     * const app = parseFunction()\n     *\n     * // use it like `define-property` lib\n     * const obj = {}\n     * app.define(obj, 'hi', 'world')\n     * console.log(obj) // => { hi: 'world' }\n     *\n     * // or define a custom plugin that adds `.foo` property\n     * // to the end result, returned from `app.parse`\n     * app.use((app) => {\n     *   return (node, result) => {\n     *     // this function is called\n     *     // only when `.parse` is called\n     *\n     *     app.define(result, 'foo', 123)\n     *\n     *     return result\n     *   }\n     * })\n     *\n     * // fixture function to be parsed\n     * const asyncFn = async (qux) => {\n     *   const bar = await Promise.resolve(qux)\n     *   return bar\n     * }\n     *\n     * const result = app.parse(asyncFn)\n     *\n     * console.log(result.name) // => null\n     * console.log(result.foo) // => 123\n     * console.log(result.args) // => ['qux']\n     *\n     * console.log(result.isAsync) // => true\n     * console.log(result.isArrow) // => true\n     * console.log(result.isNamed) // => false\n     * console.log(result.isAnonymous) // => true\n     * ```\n     *\n     * @param  {Object} `obj` the object on which to define the property\n     * @param  {String} `prop` the name of the property to be defined or modified\n     * @param  {Any} `val` the descriptor for the property being defined or modified\n     * @return {Object} `obj` the passed object, but modified\n     * @name   .define\n     * @api public\n     */\n    define: utils.define,\n  };\n\n  app.use(initial);\n\n  return app;\n}\n"],"names":["arrify","value","undefined","Array","isArray","Symbol","iterator","utils","arrayify","setDefaults","code","result","name","body","args","params","toString","setHiddenDefaults","defaults","isValid","length","isArrow","isAsync","isNamed","isAnonymous","isGenerator","isExpression","getNode","opts","parse","ast","program","expression","parseExpression","node","slice","start","end","openCurly","charCodeAt","closeCurly","type","startsWith","async","generator","id","forEach","param","defaultArgsName","left","restArgName","argument","push","right","lastExpression","expressions","pop","join","app","isFn","endsWith","isMethod","properties","key","props","parseFunction","plugins","options","mergedOptions","isFunction","isAsyncFn","includes","isAsyncArrow","test","reduce","res","fn","use","ret","define","initial"],"mappings":"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"}