{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/chairforce/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _classCallCheck from\"/Users/chairforce/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/chairforce/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/chairforce/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/chairforce/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/chairforce/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";function _templateObject4(){var data=_taggedTemplateLiteral([\"\\n    td {\\n        height: 48px;\\n        text-align: center;\\n    }\\n\"]);_templateObject4=function _templateObject4(){return data;};return data;}function _templateObject3(){var data=_taggedTemplateLiteral([\"\\n    flex: 1 1 auto;\\n    height: 100%;\\n    margin-left: 1rem;\\n\\n    a {\\n        color: \",\";\\n    }\\n\"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n    display: flex;\\n    flex-direction: row;\\n    align-items: center;\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n    position: relative;\\n    max-width: \",\";\\n    margin: 0 auto;\\n    min-height: 200px;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import*as React from'react';import{Link}from'react-router-dom';import{connect}from'react-redux';import styled from'../../utils/styled';import Page from'../../components/layout/Page';import PageContainer from'../../components/layout/PageContainer';import DataTable from'../../components/layout/DataTable';import LoadingSpinner from'../../components/data/LoadingSpinner';import{fetchRequest}from'../../store/members/actions';import TopNavBar from\"../../components/layout/topNavBar/TopNavBar\";var MembersIndexPage=/*#__PURE__*/function(_React$Component){_inherits(MembersIndexPage,_React$Component);function MembersIndexPage(){_classCallCheck(this,MembersIndexPage);return _possibleConstructorReturn(this,_getPrototypeOf(MembersIndexPage).apply(this,arguments));}_createClass(MembersIndexPage,[{key:\"componentDidMount\",value:function componentDidMount(){var fr=this.props.fetchRequest;fr();}},{key:\"renderData\",value:function renderData(){var _this$props=this.props,loading=_this$props.loading,data=_this$props.data;return React.createElement(DataTable,{columns:['Member Name','Grade','DAFSC','Office'],widths:['auto','auto','auto','auto']},loading&&data.length===0&&React.createElement(MemberLoading,null,React.createElement(\"td\",{colSpan:3},\"Loading...\")),!loading&&data.length>0&&data.map(function(member){return React.createElement(\"tr\",{key:member.id},React.createElement(MemberDetail,null,React.createElement(MemberName,null,React.createElement(Link,{to:\"/members/\".concat(member.id+member.full_name)},member.full_name))),React.createElement(\"td\",null,member.grade),React.createElement(\"td\",null,member.dafsc),React.createElement(\"td\",null,member.office_symbol));}));}},{key:\"render\",value:function render(){var loading=this.props.loading;return React.createElement(Page,{className:\"Page\"},React.createElement(TopNavBar,null),React.createElement(PageContainer,{className:\"PageContainer\"},React.createElement(TableWrapper,null,loading&&React.createElement(LoadingSpinner,null),this.renderData())));}}]);return MembersIndexPage;}(React.Component);// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nvar mapStateToProps=function mapStateToProps(_ref){var members=_ref.members;return{loading:members.loading,errors:members.errors,data:members.data};};// mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\nvar mapDispatchToProps={fetchRequest:fetchRequest};// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(mapStateToProps,mapDispatchToProps)(MembersIndexPage);var TableWrapper=styled('div')(_templateObject(),function(props){return props.theme.widths.md;});var MemberDetail=styled('td')(_templateObject2());// const MemberIcon = styled('img')`\n//   width: 32px;\n//   height: 32px;\n// `\nvar MemberName=styled('div')(_templateObject3(),function(props){return props.theme.colors.textLight;});var MemberLoading=styled('tr')(_templateObject4());","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/pages/members/index.tsx"],"names":["React","Link","connect","styled","Page","PageContainer","DataTable","LoadingSpinner","fetchRequest","TopNavBar","MembersIndexPage","fr","props","loading","data","length","map","member","id","full_name","grade","dafsc","office_symbol","renderData","Component","mapStateToProps","members","errors","mapDispatchToProps","TableWrapper","theme","widths","md","MemberDetail","MemberName","colors","textLight","MemberLoading"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport styled from '../../utils/styled';\nimport Page from '../../components/layout/Page';\nimport PageContainer from '../../components/layout/PageContainer';\nimport DataTable from '../../components/layout/DataTable';\nimport LoadingSpinner from '../../components/data/LoadingSpinner';\n\nimport { ApplicationState } from '../../store';\nimport { fetchRequest } from '../../store/members/actions';\nimport TopNavBar from \"../../components/layout/topNavBar/TopNavBar\";\nimport MemberModel from \"../../store/members/MemberModel\";\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n    loading: boolean;\n    data: MemberModel[];\n    errors?: string;\n}\n\n// We can use `typeof` here to map our dispatch types to the props, like so.\ninterface PropsFromDispatch {\n    fetchRequest: typeof fetchRequest;\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & PropsFromDispatch;\n\nclass MembersIndexPage extends React.Component<AllProps> {\n    public componentDidMount() {\n        const { fetchRequest: fr } = this.props;\n        fr();\n    }\n\n    private renderData() {\n        const { loading, data } = this.props;\n        return (\n            <DataTable\n                columns={['Member Name', 'Grade', 'DAFSC', 'Office']}\n                widths={['auto', 'auto', 'auto', 'auto']}\n            >\n                {loading && data.length === 0 && (\n                    <MemberLoading>\n                        <td colSpan={3}>Loading...</td>\n                    </MemberLoading>\n                )}\n                {!loading && data.length > 0 && (data.map(member => (\n                    <tr key={member.id}>\n                        <MemberDetail>\n                            <MemberName>\n                                <Link to={`/members/${member.id + member.full_name}`}>{member.full_name}</Link>\n                            </MemberName>\n                        </MemberDetail>\n                        <td>{member.grade}</td>\n                        <td>{member.dafsc}</td>\n                        <td>{member.office_symbol}</td>\n                    </tr>\n                )))}\n            </DataTable>\n        );\n    }\n\n    public render() {\n        const { loading } = this.props;\n\n        return (\n            <Page\n            className=\"Page\">\n                <TopNavBar/>\n                <PageContainer\n                className=\"PageContainer\">\n                    <TableWrapper>\n                        {loading && (\n                                    <LoadingSpinner />\n                        )}\n                        {this.renderData()}\n                    </TableWrapper>\n                </PageContainer>\n            </Page>\n        );\n    }\n}\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ members }: ApplicationState) => ({\n    loading: members.loading,\n    errors: members.errors,\n    data: members.data,\n});\n\n// mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\nconst mapDispatchToProps = {\n    fetchRequest,\n};\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(MembersIndexPage);\n\nconst TableWrapper = styled('div')`\n    position: relative;\n    max-width: ${props => props.theme.widths.md};\n    margin: 0 auto;\n    min-height: 200px;\n`;\n\nconst MemberDetail = styled('td')`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`;\n\n// const MemberIcon = styled('img')`\n//   width: 32px;\n//   height: 32px;\n// `\n\nconst MemberName = styled('div')`\n    flex: 1 1 auto;\n    height: 100%;\n    margin-left: 1rem;\n\n    a {\n        color: ${props => props.theme.colors.textLight};\n    }\n`;\n\nconst MemberLoading = styled('tr')`\n    td {\n        height: 48px;\n        text-align: center;\n    }\n`;\n"]},"metadata":{},"sourceType":"module"}