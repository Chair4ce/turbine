{"ast":null,"code":"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { SquadronActionTypes } from './types';\nimport { squadronPostError, squadronPostSuccess, squadronsFetchError, squadronsFetchSuccess } from './actions';\nimport { callApi } from '../../utils/api';\n\nfunction* handleFetch() {\n  try {\n    // To call async functions, use redux-saga's `call()`.\n    const res = yield call(callApi, 'get', 'api/squadrons');\n\n    if (res.error) {\n      yield put(squadronsFetchError(res.error));\n    } else {\n      yield put(squadronsFetchSuccess(res));\n    }\n  } catch (err) {\n    if (err instanceof Error && err.stack) {\n      yield put(squadronsFetchError(err.stack));\n    } else {\n      yield put(squadronsFetchError('An unknown error occured.'));\n    }\n  }\n}\n\nexport function* postNewSquadron(data) {\n  try {\n    // To call async functions, use redux-saga's `call()`.\n    const res = yield call(callApi, 'post', 'api/squadrons/add', data);\n\n    if (res.error) {\n      yield put(squadronPostError(res.error));\n    } else {\n      yield put(squadronPostSuccess());\n    }\n  } catch (err) {\n    if (err instanceof Error && err.stack) {\n      yield put(squadronsFetchError(err.stack));\n    } else {\n      yield put(squadronsFetchError('An unknown error occured.'));\n    }\n  }\n} // This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\n\nfunction* watchFetchRequest() {\n  yield takeEvery(SquadronActionTypes.FETCH_REQUEST, handleFetch);\n} // We can also use `fork()` here to split our saga into multiple watchers.\n\n\nfunction* squadronSaga() {\n  yield all([fork(watchFetchRequest)]);\n}\n\nexport default squadronSaga;","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/store/squadrons/sagas.ts"],"names":["all","call","fork","put","takeEvery","SquadronActionTypes","squadronPostError","squadronPostSuccess","squadronsFetchError","squadronsFetchSuccess","callApi","handleFetch","res","error","err","Error","stack","postNewSquadron","data","watchFetchRequest","FETCH_REQUEST","squadronSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,QAAgD,oBAAhD;AACA,SAASC,mBAAT,QAAoC,SAApC;AACA,SAAQC,iBAAR,EAA2BC,mBAA3B,EAAgDC,mBAAhD,EAAqEC,qBAArE,QAAiG,WAAjG;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAIA,UAAUC,WAAV,GAAwB;AACpB,MAAI;AACA;AACA,UAAMC,GAAG,GAAG,MAAMX,IAAI,CAACS,OAAD,EAAU,KAAV,EAAiB,eAAjB,CAAtB;;AAEA,QAAIE,GAAG,CAACC,KAAR,EAAe;AACX,YAAMV,GAAG,CAACK,mBAAmB,CAACI,GAAG,CAACC,KAAL,CAApB,CAAT;AACH,KAFD,MAEO;AACH,YAAMV,GAAG,CAACM,qBAAqB,CAACG,GAAD,CAAtB,CAAT;AACH;AACJ,GATD,CASE,OAAOE,GAAP,EAAY;AACV,QAAIA,GAAG,YAAYC,KAAf,IAAwBD,GAAG,CAACE,KAAhC,EAAuC;AACnC,YAAMb,GAAG,CAACK,mBAAmB,CAACM,GAAG,CAACE,KAAL,CAApB,CAAT;AACH,KAFD,MAEO;AACH,YAAMb,GAAG,CAACK,mBAAmB,CAAC,2BAAD,CAApB,CAAT;AACH;AACJ;AACJ;;AAED,OAAO,UAAUS,eAAV,CAA0BC,IAA1B,EAA+C;AAClD,MAAI;AACA;AACA,UAAMN,GAAG,GAAG,MAAMX,IAAI,CAACS,OAAD,EAAU,MAAV,EAAkB,mBAAlB,EAAuCQ,IAAvC,CAAtB;;AAEA,QAAIN,GAAG,CAACC,KAAR,EAAe;AACX,YAAMV,GAAG,CAACG,iBAAiB,CAACM,GAAG,CAACC,KAAL,CAAlB,CAAT;AACH,KAFD,MAEO;AACH,YAAMV,GAAG,CAACI,mBAAmB,EAApB,CAAT;AACH;AACJ,GATD,CASE,OAAOO,GAAP,EAAY;AACV,QAAIA,GAAG,YAAYC,KAAf,IAAwBD,GAAG,CAACE,KAAhC,EAAuC;AACnC,YAAMb,GAAG,CAACK,mBAAmB,CAACM,GAAG,CAACE,KAAL,CAApB,CAAT;AACH,KAFD,MAEO;AACH,YAAMb,GAAG,CAACK,mBAAmB,CAAC,2BAAD,CAApB,CAAT;AACH;AACJ;AACJ,C,CAED;AACA;;AACA,UAAUW,iBAAV,GAA8B;AAC1B,QAAMf,SAAS,CAACC,mBAAmB,CAACe,aAArB,EAAoCT,WAApC,CAAf;AACH,C,CAED;;;AACA,UAAUU,YAAV,GAAyB;AACrB,QAAMrB,GAAG,CAAC,CAACE,IAAI,CAACiB,iBAAD,CAAL,CAAD,CAAT;AACH;;AAED,eAAeE,YAAf","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { SquadronActionTypes } from './types';\nimport {squadronPostError, squadronPostSuccess, squadronsFetchError, squadronsFetchSuccess} from './actions';\nimport { callApi } from '../../utils/api';\nimport SquadronModel from \"./SquadronModel\";\n\n\nfunction *handleFetch() {\n    try {\n        // To call async functions, use redux-saga's `call()`.\n        const res = yield call(callApi, 'get', 'api/squadrons');\n\n        if (res.error) {\n            yield put(squadronsFetchError(res.error));\n        } else {\n            yield put(squadronsFetchSuccess(res));\n        }\n    } catch (err) {\n        if (err instanceof Error && err.stack) {\n            yield put(squadronsFetchError(err.stack));\n        } else {\n            yield put(squadronsFetchError('An unknown error occured.'));\n        }\n    }\n}\n\nexport function *postNewSquadron(data: SquadronModel) {\n    try {\n        // To call async functions, use redux-saga's `call()`.\n        const res = yield call(callApi, 'post', 'api/squadrons/add', data);\n\n        if (res.error) {\n            yield put(squadronPostError(res.error));\n        } else {\n            yield put(squadronPostSuccess());\n        }\n    } catch (err) {\n        if (err instanceof Error && err.stack) {\n            yield put(squadronsFetchError(err.stack));\n        } else {\n            yield put(squadronsFetchError('An unknown error occured.'));\n        }\n    }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction *watchFetchRequest() {\n    yield takeEvery(SquadronActionTypes.FETCH_REQUEST, handleFetch);\n}\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction *squadronSaga() {\n    yield all([fork(watchFetchRequest)]);\n}\n\nexport default squadronSaga;"]},"metadata":{},"sourceType":"module"}