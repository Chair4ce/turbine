{"ast":null,"code":"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { MembersActionTypes } from './types';\nimport { fetchError, fetchSuccess } from './actions';\nimport { callApi } from '../../utils/api';\nconst API_ENDPOINT = 'http://localhost:8080';\n\nfunction* handleFetch() {\n  try {\n    // To call async functions, use redux-saga's `call()`.\n    const res = yield call(callApi, 'get', API_ENDPOINT, 'api/members');\n\n    if (res.error) {\n      yield put(fetchError(res.error));\n    } else {\n      yield put(fetchSuccess(res));\n    }\n  } catch (err) {\n    if (err instanceof Error && err.stack) {\n      yield put(fetchError(err.stack));\n    } else {\n      yield put(fetchError('An unknown error occured.'));\n    }\n  }\n} // This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\n\n\nfunction* watchFetchRequest() {\n  yield takeEvery(MembersActionTypes.FETCH_REQUEST, handleFetch);\n} // We can also use `fork()` here to split our saga into multiple watchers.\n\n\nfunction* membersSaga() {\n  yield all([fork(watchFetchRequest)]);\n}\n\nexport default membersSaga;","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/store/members/sagas.ts"],"names":["all","call","fork","put","takeEvery","MembersActionTypes","fetchError","fetchSuccess","callApi","API_ENDPOINT","handleFetch","res","error","err","Error","stack","watchFetchRequest","FETCH_REQUEST","membersSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,QAAgD,oBAAhD;AACA,SAASC,kBAAT,QAAmC,SAAnC;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,WAAzC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,MAAMC,YAAY,GAAG,uBAArB;;AAEA,UAAUC,WAAV,GAAwB;AACpB,MAAI;AACA;AACA,UAAMC,GAAG,GAAG,MAAMV,IAAI,CAACO,OAAD,EAAU,KAAV,EAAiBC,YAAjB,EAA+B,aAA/B,CAAtB;;AAEA,QAAIE,GAAG,CAACC,KAAR,EAAe;AACX,YAAMT,GAAG,CAACG,UAAU,CAACK,GAAG,CAACC,KAAL,CAAX,CAAT;AACH,KAFD,MAEO;AACH,YAAMT,GAAG,CAACI,YAAY,CAACI,GAAD,CAAb,CAAT;AACH;AACJ,GATD,CASE,OAAOE,GAAP,EAAY;AACV,QAAIA,GAAG,YAAYC,KAAf,IAAwBD,GAAG,CAACE,KAAhC,EAAuC;AACnC,YAAMZ,GAAG,CAACG,UAAU,CAACO,GAAG,CAACE,KAAL,CAAX,CAAT;AACH,KAFD,MAEO;AACH,YAAMZ,GAAG,CAACG,UAAU,CAAC,2BAAD,CAAX,CAAT;AACH;AACJ;AACJ,C,CAED;AACA;;;AACA,UAAUU,iBAAV,GAA8B;AAC1B,QAAMZ,SAAS,CAACC,kBAAkB,CAACY,aAApB,EAAmCP,WAAnC,CAAf;AACH,C,CAED;;;AACA,UAAUQ,WAAV,GAAwB;AACpB,QAAMlB,GAAG,CAAC,CAACE,IAAI,CAACc,iBAAD,CAAL,CAAD,CAAT;AACH;;AAED,eAAeE,WAAf","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { MembersActionTypes } from './types';\nimport { fetchError, fetchSuccess } from './actions';\nimport { callApi } from '../../utils/api';\n\nconst API_ENDPOINT = 'http://localhost:8080';\n\nfunction *handleFetch() {\n    try {\n        // To call async functions, use redux-saga's `call()`.\n        const res = yield call(callApi, 'get', API_ENDPOINT, 'api/members');\n\n        if (res.error) {\n            yield put(fetchError(res.error));\n        } else {\n            yield put(fetchSuccess(res));\n        }\n    } catch (err) {\n        if (err instanceof Error && err.stack) {\n            yield put(fetchError(err.stack));\n        } else {\n            yield put(fetchError('An unknown error occured.'));\n        }\n    }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction *watchFetchRequest() {\n    yield takeEvery(MembersActionTypes.FETCH_REQUEST, handleFetch);\n}\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction *membersSaga() {\n    yield all([fork(watchFetchRequest)]);\n}\n\nexport default membersSaga;\n"]},"metadata":{},"sourceType":"module"}