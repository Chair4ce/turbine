{"ast":null,"code":"import _defineProperty from\"/Users/ridley/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{SquadronActionTypes}from'./types';import{postNewSquadron}from\"./sagas\";// Type-safe initialState!\nexport var initialState={squadrons:[],newInput:{},errors:undefined,loading:false,showInput:false,posting:false};// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nvar reducer=function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case SquadronActionTypes.FETCH_REQUEST:{return _objectSpread({},state,{loading:true});}case SquadronActionTypes.FETCH_SUCCESS:{return _objectSpread({},state,{loading:false,squadrons:action.payload});}case SquadronActionTypes.FETCH_ERROR:{return _objectSpread({},state,{loading:false,errors:action.payload});}case SquadronActionTypes.SHOW_INPUT:{return _objectSpread({},state,{showInput:!state.showInput});}case SquadronActionTypes.POST_REQUEST:{console.log(\"POST_REQUEST\");postNewSquadron(action.payload);return _objectSpread({},state,{posting:true});}case SquadronActionTypes.POST_SUCCESS:{console.log(\"POST_SUCCESS\");return _objectSpread({},state,{showInput:false,posting:false});}default:{return state;}}};// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport{reducer as squadronsReducer};","map":{"version":3,"sources":["/Users/ridley/workspace/turbine/client/src/store/squadrons/reducer.ts"],"names":["SquadronActionTypes","postNewSquadron","initialState","squadrons","newInput","errors","undefined","loading","showInput","posting","reducer","state","action","type","FETCH_REQUEST","FETCH_SUCCESS","payload","FETCH_ERROR","SHOW_INPUT","POST_REQUEST","console","log","POST_SUCCESS","squadronsReducer"],"mappings":"26BACA,OAAyBA,mBAAzB,KAAoD,SAApD,CAEA,OAAQC,eAAR,KAA8B,SAA9B,CAEA;AACA,MAAO,IAAMC,CAAAA,YAA4B,CAAG,CACxCC,SAAS,CAAE,EAD6B,CAExCC,QAAQ,CAAE,EAF8B,CAGxCC,MAAM,CAAEC,SAHgC,CAIxCC,OAAO,CAAE,KAJ+B,CAKxCC,SAAS,CAAE,KAL6B,CAMxCC,OAAO,CAAE,KAN+B,CAArC,CASP;AACA;AACA,GAAMC,CAAAA,OAAgC,CAAG,QAAnCA,CAAAA,OAAmC,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBT,YAAyB,IAAXU,CAAAA,MAAW,2CACvE,OAAQA,MAAM,CAACC,IAAf,EACI,IAAKb,CAAAA,mBAAmB,CAACc,aAAzB,CAAwC,CACpC,wBACOH,KADP,EAEIJ,OAAO,CAAE,IAFb,GAIH,CACD,IAAKP,CAAAA,mBAAmB,CAACe,aAAzB,CAAwC,CACpC,wBAAYJ,KAAZ,EAAmBJ,OAAO,CAAE,KAA5B,CAAmCJ,SAAS,CAAES,MAAM,CAACI,OAArD,GACH,CACD,IAAKhB,CAAAA,mBAAmB,CAACiB,WAAzB,CAAsC,CAClC,wBAAYN,KAAZ,EAAmBJ,OAAO,CAAE,KAA5B,CAAmCF,MAAM,CAAEO,MAAM,CAACI,OAAlD,GACH,CACD,IAAKhB,CAAAA,mBAAmB,CAACkB,UAAzB,CAAqC,CACjC,wBACOP,KADP,EAEIH,SAAS,CAAE,CAACG,KAAK,CAACH,SAFtB,GAIH,CACD,IAAKR,CAAAA,mBAAmB,CAACmB,YAAzB,CAAuC,CACnCC,OAAO,CAACC,GAAR,CAAY,cAAZ,EACApB,eAAe,CAACW,MAAM,CAACI,OAAR,CAAf,CACA,wBACOL,KADP,EAEIF,OAAO,CAAE,IAFb,GAIH,CACD,IAAKT,CAAAA,mBAAmB,CAACsB,YAAzB,CAAuC,CACnCF,OAAO,CAACC,GAAR,CAAY,cAAZ,EACA,wBACOV,KADP,EAEIH,SAAS,CAAE,KAFf,CAGIC,OAAO,CAAE,KAHb,GAKH,CACD,QAAS,CACL,MAAOE,CAAAA,KAAP,CACH,CArCL,CAuCH,CAxCD,CA0CA;AACA;AACA,OAASD,OAAO,GAAIa,CAAAA,gBAApB","sourcesContent":["import { Reducer } from 'redux';\nimport { SquadronsState, SquadronActionTypes } from './types';\nimport SquadronModel from \"./SquadronModel\";\nimport {postNewSquadron} from \"./sagas\";\n\n// Type-safe initialState!\nexport const initialState: SquadronsState = {\n    squadrons: [] as SquadronModel[],\n    newInput: {} as SquadronModel,\n    errors: undefined,\n    loading: false,\n    showInput: false,\n    posting: false,\n};\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<SquadronsState> = (state = initialState, action) => {\n    switch (action.type) {\n        case SquadronActionTypes.FETCH_REQUEST: {\n            return {\n                ...state,\n                loading: true\n            };\n        }\n        case SquadronActionTypes.FETCH_SUCCESS: {\n            return { ...state, loading: false, squadrons: action.payload };\n        }\n        case SquadronActionTypes.FETCH_ERROR: {\n            return { ...state, loading: false, errors: action.payload };\n        }\n        case SquadronActionTypes.SHOW_INPUT: {\n            return {\n                ...state,\n                showInput: !state.showInput\n            };\n        }\n        case SquadronActionTypes.POST_REQUEST: {\n            console.log(\"POST_REQUEST\");\n            postNewSquadron(action.payload);\n            return {\n                ...state,\n                posting: true\n            };\n        }\n        case SquadronActionTypes.POST_SUCCESS: {\n            console.log(\"POST_SUCCESS\");\n            return {\n                ...state,\n                showInput: false,\n                posting: false\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as squadronsReducer };"]},"metadata":{},"sourceType":"module"}