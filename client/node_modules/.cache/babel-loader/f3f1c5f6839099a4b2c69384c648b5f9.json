{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { all, fork } from 'redux-saga/effects';\nimport { connectRouter } from 'connected-react-router';\nimport { layoutReducer } from './layout';\nimport membersSaga from './members/sagas';\nimport { membersReducer } from './members/reducer';\nimport { squadronsReducer } from \"./squadrons/reducer\";\nimport squadronSaga from \"./squadrons/sagas\";\nimport { flightsReducer } from \"./flights/reducer\";\nimport { AETsReducer } from \"./AETs/reducer\";\nimport flightSaga from \"./flights/sagas\"; // The top-level state object\n\n// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport const createRootReducer = history => combineReducers({\n  layout: layoutReducer,\n  squadrons: squadronsReducer,\n  flights: flightsReducer,\n  AETs: AETsReducer,\n  members: membersReducer,\n  router: connectRouter(history)\n}); // Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n\nexport function* rootSaga() {\n  yield all([fork(membersSaga), fork(squadronSaga), fork(flightSaga())]);\n}","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/store/index.ts"],"names":["combineReducers","all","fork","connectRouter","layoutReducer","membersSaga","membersReducer","squadronsReducer","squadronSaga","flightsReducer","AETsReducer","flightSaga","createRootReducer","history","layout","squadrons","flights","AETs","members","router","rootSaga"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,SAASC,aAAT,QAA2C,wBAA3C;AAGA,SAAsBC,aAAtB,QAA2C,UAA3C;AAEA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAGA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AAGA,SAAQC,cAAR,QAA6B,mBAA7B;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,OAAOC,UAAP,MAAuB,iBAAvB,C,CAEA;;AAUA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,OAAD,IAC7Bb,eAAe,CAAC;AACZc,EAAAA,MAAM,EAAEV,aADI;AAEZW,EAAAA,SAAS,EAAER,gBAFC;AAGZS,EAAAA,OAAO,EAAEP,cAHG;AAIZQ,EAAAA,IAAI,EAAEP,WAJM;AAKZQ,EAAAA,OAAO,EAAEZ,cALG;AAMZa,EAAAA,MAAM,EAAEhB,aAAa,CAACU,OAAD;AANT,CAAD,CADZ,C,CAUP;AACA;AACA;;AACA,OAAO,UAAUO,QAAV,GAAqB;AACxB,QAAMnB,GAAG,CAAC,CAACC,IAAI,CAACG,WAAD,CAAL,EAAmBH,IAAI,CAACM,YAAD,CAAvB,EAAsCN,IAAI,CAACS,UAAU,EAAX,CAA1C,CAAD,CAAT;AACH","sourcesContent":["import { combineReducers } from 'redux';\nimport { all, fork } from 'redux-saga/effects';\nimport { connectRouter, RouterState } from 'connected-react-router';\nimport { History } from 'history';\n\nimport { LayoutState, layoutReducer } from './layout';\n\nimport membersSaga from './members/sagas';\nimport { membersReducer } from './members/reducer';\nimport { MembersState } from './members/types';\nimport { SquadronsState } from \"./squadrons/types\";\nimport { squadronsReducer } from \"./squadrons/reducer\";\nimport squadronSaga from \"./squadrons/sagas\";\nimport {FlightsState} from \"./flights/types\";\nimport {AETsState} from \"./AETs/types\";\nimport {flightsReducer} from \"./flights/reducer\";\nimport {AETsReducer} from \"./AETs/reducer\";\nimport flightSaga from \"./flights/sagas\";\n\n// The top-level state object\nexport interface ApplicationState {\n    layout: LayoutState;\n    members: MembersState;\n    squadrons: SquadronsState;\n    flights: FlightsState;\n    AETs: AETsState;\n    router: RouterState;\n}\n\n// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport const createRootReducer = (history: History) =>\n    combineReducers({\n        layout: layoutReducer,\n        squadrons: squadronsReducer,\n        flights: flightsReducer,\n        AETs: AETsReducer,\n        members: membersReducer,\n        router: connectRouter(history),\n    });\n\n// Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\nexport function* rootSaga() {\n    yield all([fork(membersSaga),fork(squadronSaga),fork(flightSaga())]);\n}\n"]},"metadata":{},"sourceType":"module"}