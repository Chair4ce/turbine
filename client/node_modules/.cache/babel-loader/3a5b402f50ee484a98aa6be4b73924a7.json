{"ast":null,"code":"import{createStore,applyMiddleware}from'redux';import createSagaMiddleware from'redux-saga';// `react-router-redux` is deprecated, so we use `connected-react-router`.\n// This provides a Redux middleware which connects to our `react-router` instance.\nimport{routerMiddleware}from'connected-react-router';// We'll be using Redux Devtools. We can use the `composeWithDevTools()`\n// directive so we can pass our middleware along with it\nimport{composeWithDevTools}from'redux-devtools-extension';// If you use react-router, don't forget to pass in your history type.\n// Import the state interface and our combined reducers/sagas.\nimport{createRootReducer,rootSaga}from'./store';export default function configureStore(history,initialState){// create the composing function for our middlewares\nvar composeEnhancers=composeWithDevTools({});// create the redux-saga middleware\nvar sagaMiddleware=createSagaMiddleware();// We'll create our store with the combined reducers/sagas, and the initial Redux state that\n// we'll be passing from our entry point.\nvar store=createStore(createRootReducer(history),initialState,composeEnhancers(applyMiddleware(routerMiddleware(history),sagaMiddleware)));// Don't forget to run the root saga, and return the store object.\nsagaMiddleware.run(rootSaga);return store;}","map":{"version":3,"sources":["/Users/ridley/workspace/turbine/client/src/configureStore.ts"],"names":["createStore","applyMiddleware","createSagaMiddleware","routerMiddleware","composeWithDevTools","createRootReducer","rootSaga","configureStore","history","initialState","composeEnhancers","sagaMiddleware","store","run"],"mappings":"AAAA,OAAgBA,WAAhB,CAA6BC,eAA7B,KAAoD,OAApD,CACA,MAAOC,CAAAA,oBAAP,KAAiC,YAAjC,CACA;AACA;AACA,OAASC,gBAAT,KAAiC,wBAAjC,CACA;AACA;AACA,OAASC,mBAAT,KAAoC,0BAApC,CACA;AAGA;AACA,OAA2BC,iBAA3B,CAA8CC,QAA9C,KAA8D,SAA9D,CAEA,cAAe,SAASC,CAAAA,cAAT,CAAwBC,OAAxB,CAA0CC,YAA1C,CAAmG,CAC9G;AACA,GAAMC,CAAAA,gBAAgB,CAAGN,mBAAmB,CAAC,EAAD,CAA5C,CACA;AACA,GAAMO,CAAAA,cAAc,CAAGT,oBAAoB,EAA3C,CAEA;AACA;AACA,GAAMU,CAAAA,KAAK,CAAGZ,WAAW,CACrBK,iBAAiB,CAACG,OAAD,CADI,CAErBC,YAFqB,CAGrBC,gBAAgB,CAACT,eAAe,CAACE,gBAAgB,CAACK,OAAD,CAAjB,CAA4BG,cAA5B,CAAhB,CAHK,CAAzB,CAMA;AACAA,cAAc,CAACE,GAAf,CAAmBP,QAAnB,EACA,MAAOM,CAAAA,KAAP,CACH","sourcesContent":["import { Store, createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n// `react-router-redux` is deprecated, so we use `connected-react-router`.\n// This provides a Redux middleware which connects to our `react-router` instance.\nimport { routerMiddleware } from 'connected-react-router';\n// We'll be using Redux Devtools. We can use the `composeWithDevTools()`\n// directive so we can pass our middleware along with it\nimport { composeWithDevTools } from 'redux-devtools-extension';\n// If you use react-router, don't forget to pass in your history type.\nimport { History } from 'history';\n\n// Import the state interface and our combined reducers/sagas.\nimport { ApplicationState, createRootReducer, rootSaga } from './store';\n\nexport default function configureStore(history: History, initialState: ApplicationState): Store<ApplicationState> {\n    // create the composing function for our middlewares\n    const composeEnhancers = composeWithDevTools({});\n    // create the redux-saga middleware\n    const sagaMiddleware = createSagaMiddleware();\n\n    // We'll create our store with the combined reducers/sagas, and the initial Redux state that\n    // we'll be passing from our entry point.\n    const store = createStore(\n        createRootReducer(history),\n        initialState,\n        composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware)),\n    );\n\n    // Don't forget to run the root saga, and return the store object.\n    sagaMiddleware.run(rootSaga);\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}