{"ast":null,"code":"var _jsxFileName = \"/Users/chairforce/workspace/turbine/client/src/main.tsx\";\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { ThemeProvider } from 'emotion-theming';\nimport Routes from './routes';\nimport LayoutContainer from './containers/LayoutContainer';\nimport * as themes from './styles/theme'; // Any additional component props go here.\n\n// Create an intersection type of the component props and our Redux props.\nconst Main = ({\n  store,\n  history\n}) => {\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(ConnectedRouter, {\n    history: history,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(LayoutContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, ({\n    theme\n  }) => React.createElement(ThemeProvider, {\n    theme: themes[theme],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Routes, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })))));\n}; // Normally you wouldn't need any generics here (since types infer from the passed functions).\n// But since we pass some props from the `index.js` file, we have to include them.\n// For an example of a `connect` function without generics, see `./containers/LayoutContainer`.\n\n\nexport default Main;","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/main.tsx"],"names":["React","Provider","ConnectedRouter","ThemeProvider","Routes","LayoutContainer","themes","Main","store","history","theme"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,eAAT,QAAgC,wBAAhC;AAGA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB,C,CAEA;;AAMA;AACA,MAAMC,IAAyB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAwB;AACtD,SACI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAEC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAC;AAAEC,IAAAA;AAAF,GAAD,KACG,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEJ,MAAM,CAACI,KAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFR,CADJ,CADJ,CADJ;AAaH,CAdD,C,CAgBA;AACA;AACA;;;AACA,eAAeH,IAAf","sourcesContent":["import * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Store } from 'redux';\nimport { History } from 'history';\nimport { ThemeProvider } from 'emotion-theming';\n\nimport Routes from './routes';\nimport { ApplicationState } from './store';\nimport LayoutContainer from './containers/LayoutContainer';\nimport * as themes from './styles/theme';\n\n// Any additional component props go here.\ninterface MainProps {\n    store: Store<ApplicationState>;\n    history: History;\n}\n\n// Create an intersection type of the component props and our Redux props.\nconst Main: React.FC<MainProps> = ({ store, history }) => {\n    return (\n        <Provider store={store}>\n            <ConnectedRouter history={history}>\n                <LayoutContainer>\n                    {({ theme }) => (\n                        <ThemeProvider theme={themes[theme]}>\n                            <Routes />\n                        </ThemeProvider>\n                    )}\n                </LayoutContainer>\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\n// Normally you wouldn't need any generics here (since types infer from the passed functions).\n// But since we pass some props from the `index.js` file, we have to include them.\n// For an example of a `connect` function without generics, see `./containers/LayoutContainer`.\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}