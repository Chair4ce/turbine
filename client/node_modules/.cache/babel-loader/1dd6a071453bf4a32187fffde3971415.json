{"ast":null,"code":"var _jsxFileName = \"/Users/chairforce/workspace/turbine/client/src/routes.tsx\";\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Global } from '@emotion/core';\nimport Root from './components/layout/Root';\nimport Main from './pages/index';\nimport MembersPage from './pages/members';\nimport normalize from './styles/normalize';\nimport globals from './styles/globals'; // If your app is big + you have routes with a lot of components, you should consider\n// code-splitting your routes! If you bundle stuff up with Webpack, I recommend `react-loadable`.\n//\n// $ yarn add react-loadable\n// $ yarn add --dev @types/react-loadable\n//\n// The given `pages/` directory provides an example of a directory structure that's easily\n// code-splittable.\n\nconst Routes = () => React.createElement(Root, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, React.createElement(Global, {\n  styles: normalize,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}), React.createElement(Global, {\n  styles: globals,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}), React.createElement(Switch, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, React.createElement(Route, {\n  exact: true,\n  path: \"/\",\n  component: Main,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}), React.createElement(Route, {\n  path: \"/members\",\n  component: MembersPage,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}), React.createElement(Route, {\n  component: () => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Not Found\"),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n})));\n\nexport default Routes;","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/routes.tsx"],"names":["React","Route","Switch","Global","Root","Main","MembersPage","normalize","globals","Routes"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,SAASC,MAAT,QAAuB,eAAvB;AAEA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,OAAP,MAAoB,kBAApB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,MAAgB,GAAG,MACrB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,MAAD;AAAQ,EAAA,MAAM,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEI,oBAAC,MAAD;AAAQ,EAAA,MAAM,EAAEC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFJ,EAII,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,KAAD;AAAO,EAAA,KAAK,MAAZ;AAAa,EAAA,IAAI,EAAC,GAAlB;AAAsB,EAAA,SAAS,EAAEH,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEI,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,UAAZ;AAAuB,EAAA,SAAS,EAAEC,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFJ,EAGI,oBAAC,KAAD;AAAO,EAAA,SAAS,EAAE,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHJ,CAJJ,CADJ;;AAaA,eAAeG,MAAf","sourcesContent":["import * as React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport { Global } from '@emotion/core'\n\nimport Root from './components/layout/Root'\nimport Main from './pages/index'\nimport MembersPage from './pages/members'\nimport normalize from './styles/normalize'\nimport globals from './styles/globals'\n\n// If your app is big + you have routes with a lot of components, you should consider\n// code-splitting your routes! If you bundle stuff up with Webpack, I recommend `react-loadable`.\n//\n// $ yarn add react-loadable\n// $ yarn add --dev @types/react-loadable\n//\n// The given `pages/` directory provides an example of a directory structure that's easily\n// code-splittable.\n\nconst Routes: React.FC = () => (\n    <Root>\n        <Global styles={normalize} />\n        <Global styles={globals} />\n\n        <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route path=\"/members\" component={MembersPage} />\n            <Route component={() => <div>Not Found</div>} />\n        </Switch>\n    </Root>\n)\n\nexport default Routes"]},"metadata":{},"sourceType":"module"}