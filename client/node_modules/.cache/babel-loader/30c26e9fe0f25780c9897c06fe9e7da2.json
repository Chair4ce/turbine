{"ast":null,"code":"import _regeneratorRuntime from\"/Users/chairforce/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(rootSaga);import{combineReducers}from'redux';import{all,fork}from'redux-saga/effects';import{connectRouter}from'connected-react-router';import{layoutReducer}from'./layout';import membersSaga from'./members/sagas';import{membersReducer}from'./members/reducer';// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport var createRootReducer=function createRootReducer(history){return combineReducers({layout:layoutReducer,members:membersReducer,router:connectRouter(history)});};// Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\nexport function rootSaga(){return _regeneratorRuntime.wrap(function rootSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return all([fork(membersSaga)]);case 2:case\"end\":return _context.stop();}}},_marked);}","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/store/index.ts"],"names":["rootSaga","combineReducers","all","fork","connectRouter","layoutReducer","membersSaga","membersReducer","createRootReducer","history","layout","members","router"],"mappings":"0MA+BiBA,Q,EA/BjB,OAASC,eAAT,KAAgC,OAAhC,CACA,OAASC,GAAT,CAAcC,IAAd,KAA0B,oBAA1B,CACA,OAASC,aAAT,KAA2C,wBAA3C,CAGA,OAAsBC,aAAtB,KAA2C,UAA3C,CAEA,MAAOC,CAAAA,WAAP,KAAwB,iBAAxB,CACA,OAASC,cAAT,KAA+B,mBAA/B,CAUA;AACA;AACA;AACA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,OAAD,QAC7BR,CAAAA,eAAe,CAAC,CACZS,MAAM,CAAEL,aADI,CAEZM,OAAO,CAAEJ,cAFG,CAGZK,MAAM,CAAER,aAAa,CAACK,OAAD,CAHT,CAAD,CADc,EAA1B,CAOP;AACA;AACA;AACA,MAAO,SAAUT,CAAAA,QAAV,oIACH,MAAME,CAAAA,GAAG,CAAC,CAACC,IAAI,CAACG,WAAD,CAAL,CAAD,CAAT,CADG","sourcesContent":["import { combineReducers } from 'redux';\nimport { all, fork } from 'redux-saga/effects';\nimport { connectRouter, RouterState } from 'connected-react-router';\nimport { History } from 'history';\n\nimport { LayoutState, layoutReducer } from './layout';\n\nimport membersSaga from './members/sagas';\nimport { membersReducer } from './members/reducer';\nimport { MembersState } from './members/types';\n\n// The top-level state object\nexport interface ApplicationState {\n    layout: LayoutState;\n    members: MembersState;\n    router: RouterState;\n}\n\n// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport const createRootReducer = (history: History) =>\n    combineReducers({\n        layout: layoutReducer,\n        members: membersReducer,\n        router: connectRouter(history),\n    });\n\n// Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\nexport function* rootSaga() {\n    yield all([fork(membersSaga)]);\n}\n"]},"metadata":{},"sourceType":"module"}