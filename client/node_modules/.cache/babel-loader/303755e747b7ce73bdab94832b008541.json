{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/chairforce/workspace/turbyne/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/chairforce/workspace/turbyne/client/src/pages/members/index.tsx\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n    td {\\n        height: 48px;\\n        text-align: center;\\n    }\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n    flex: 1 1 auto;\\n    height: 100%;\\n    margin-left: 1rem;\\n\\n    a {\\n        color: \", \";\\n    }\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n    display: flex;\\n    flex-direction: row;\\n    align-items: center;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    position: relative;\\n    max-width: \", \";\\n    margin: 0 auto;\\n    min-height: 200px;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport styled from '../../utils/styled';\nimport Page from '../../components/layout/Page';\nimport Container from '../../components/layout/Container';\nimport DataTable from '../../components/layout/DataTable';\nimport LoadingOverlay from '../../components/data/LoadingOverlay';\nimport LoadingOverlayInner from '../../components/data/LoadingOverlayInner';\nimport LoadingSpinner from '../../components/data/LoadingSpinner';\nimport { fetchRequest } from '../../store/members/actions'; // import {MemberMenuBox, MenuButton} from \"../../components/members/MemberMenuBox\";\n// Separate state props + dispatch props to their own interfaces.\n\nclass MembersIndexPage extends React.Component {\n  componentDidMount() {\n    const fr = this.props.fetchRequest;\n    fr();\n  }\n\n  renderData() {\n    const _this$props = this.props,\n          loading = _this$props.loading,\n          data = _this$props.data;\n    return React.createElement(DataTable, {\n      columns: ['Member Name', 'Grade', 'DAFSC', 'Office'],\n      widths: ['auto', 'auto', 'auto', 'auto'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, loading && data.length === 0 && React.createElement(MemberLoading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      colSpan: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Loading...\")), data.map(member => React.createElement(\"tr\", {\n      key: member.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(MemberDetail, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(MemberName, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/members/\".concat(member.full_name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, member.full_name))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, member._id), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, member.grade), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, member.dafsc), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, member.office_symbol))));\n  }\n\n  render() {\n    const loading = this.props.loading;\n    return React.createElement(Page, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(TableWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, loading && React.createElement(LoadingOverlay, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(LoadingOverlayInner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(LoadingSpinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }))), this.renderData())));\n  }\n\n} // It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\n\n\nconst mapStateToProps = ({\n  members\n}) => ({\n  loading: members.loading,\n  errors: members.errors,\n  data: members.data\n}); // mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\n\n\nconst mapDispatchToProps = {\n  fetchRequest\n}; // Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MembersIndexPage);\nconst TableWrapper = styled('div')(_templateObject(), props => props.theme.widths.md);\nconst MemberDetail = styled('td')(_templateObject2()); // const MemberIcon = styled('img')`\n//   width: 32px;\n//   height: 32px;\n// `\n\nconst MemberName = styled('div')(_templateObject3(), props => props.theme.colors.brand);\nconst MemberLoading = styled('tr')(_templateObject4());","map":{"version":3,"sources":["/Users/chairforce/workspace/turbyne/client/src/pages/members/index.tsx"],"names":["React","Link","connect","styled","Page","Container","DataTable","LoadingOverlay","LoadingOverlayInner","LoadingSpinner","fetchRequest","MembersIndexPage","Component","componentDidMount","fr","props","renderData","loading","data","length","map","member","id","full_name","_id","grade","dafsc","office_symbol","render","mapStateToProps","members","errors","mapDispatchToProps","TableWrapper","theme","widths","md","MemberDetail","MemberName","colors","brand","MemberLoading"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport styled from '../../utils/styled';\nimport Page from '../../components/layout/Page';\nimport Container from '../../components/layout/Container';\nimport DataTable from '../../components/layout/DataTable';\nimport LoadingOverlay from '../../components/data/LoadingOverlay';\nimport LoadingOverlayInner from '../../components/data/LoadingOverlayInner';\nimport LoadingSpinner from '../../components/data/LoadingSpinner';\n\nimport { ApplicationState } from '../../store';\nimport { Member } from '../../store/members/types';\nimport { fetchRequest } from '../../store/members/actions';\n// import {MemberMenuBox, MenuButton} from \"../../components/members/MemberMenuBox\";\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n    loading: boolean;\n    data: Member[];\n    errors?: string;\n}\n\n// We can use `typeof` here to map our dispatch types to the props, like so.\ninterface PropsFromDispatch {\n    fetchRequest: typeof fetchRequest;\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & PropsFromDispatch;\n\nclass MembersIndexPage extends React.Component<AllProps> {\n    public componentDidMount() {\n        const { fetchRequest: fr } = this.props;\n        fr();\n    }\n\n    private renderData() {\n        const { loading, data } = this.props;\n        return (\n            <DataTable\n                columns={['Member Name', 'Grade', 'DAFSC', 'Office']}\n                widths={['auto', 'auto', 'auto', 'auto']}\n            >\n                {loading && data.length === 0 && (\n                    <MemberLoading>\n                        <td colSpan={3}>Loading...</td>\n                    </MemberLoading>\n                )}\n                {data.map(member => (\n                    <tr key={member.id}>\n                        <MemberDetail>\n                            <MemberName>\n                                <Link to={`/members/${member.full_name}`}>{member.full_name}</Link>\n                            </MemberName>\n                        </MemberDetail>\n                        <td>{member._id}</td>\n                        <td>{member.grade}</td>\n                        <td>{member.dafsc}</td>\n                        <td>{member.office_symbol}</td>\n                    </tr>\n                ))}\n            </DataTable>\n        );\n    }\n\n    public render() {\n        const { loading } = this.props;\n\n        return (\n            <Page>\n                <Container>\n                    <TableWrapper>\n                        {loading && (\n                            <LoadingOverlay>\n                                <LoadingOverlayInner>\n                                    <LoadingSpinner />\n                                </LoadingOverlayInner>\n                            </LoadingOverlay>\n                        )}\n                        {this.renderData()}\n                    </TableWrapper>\n                </Container>\n            </Page>\n        );\n    }\n}\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ members }: ApplicationState) => ({\n    loading: members.loading,\n    errors: members.errors,\n    data: members.data,\n});\n\n// mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\nconst mapDispatchToProps = {\n    fetchRequest,\n};\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(MembersIndexPage);\n\nconst TableWrapper = styled('div')`\n    position: relative;\n    max-width: ${props => props.theme.widths.md};\n    margin: 0 auto;\n    min-height: 200px;\n`;\n\nconst MemberDetail = styled('td')`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`;\n\n// const MemberIcon = styled('img')`\n//   width: 32px;\n//   height: 32px;\n// `\n\nconst MemberName = styled('div')`\n    flex: 1 1 auto;\n    height: 100%;\n    margin-left: 1rem;\n\n    a {\n        color: ${props => props.theme.colors.brand};\n    }\n`;\n\nconst MemberLoading = styled('tr')`\n    td {\n        height: 48px;\n        text-align: center;\n    }\n`;\n"]},"metadata":{},"sourceType":"module"}