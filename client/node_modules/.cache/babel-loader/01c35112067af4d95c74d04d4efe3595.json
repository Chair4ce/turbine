{"ast":null,"code":"// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport let SquadronActionTypes; // Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\n\n(function (SquadronActionTypes) {\n  SquadronActionTypes[\"FETCH_REQUEST\"] = \"@@squadrons/FETCH_REQUEST\";\n  SquadronActionTypes[\"FETCH_SUCCESS\"] = \"@@squadrons/FETCH_SUCCESS\";\n  SquadronActionTypes[\"FETCH_ERROR\"] = \"@@squadrons/FETCH_ERROR\";\n})(SquadronActionTypes || (SquadronActionTypes = {}));","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/store/squadrons/types.ts"],"names":["SquadronActionTypes"],"mappings":"AAOA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,WAAYA,mBAAZ,C,CAMA;AACA;;WAPYA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB","sourcesContent":["export interface Squadron extends ApiResponse {\n    id: string;\n    squadron: string;\n    pas_Code: string;\n    group_Pas: string;\n}\n\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\nexport type ApiResponse = Record<string, any>;\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport enum SquadronActionTypes {\n    FETCH_REQUEST = '@@squadrons/FETCH_REQUEST',\n    FETCH_SUCCESS = '@@squadrons/FETCH_SUCCESS',\n    FETCH_ERROR = '@@squadrons/FETCH_ERROR',\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface SquadronsState {\n    readonly loading: boolean;\n    readonly squadrons: Squadron[];\n    readonly errors?: string;\n}\n"]},"metadata":{},"sourceType":"module"}