{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/chairforce/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/chairforce/workspace/turbine/client/src/pages/members/show.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    position: relative;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { MemberInfobox // MemberInfoboxImage,\n, MemberInfoboxHeading, MemberInfoboxInner // MemberInfoboxBlurBackground,\n, MemberName // MemberRoles,\n} from '../../components/members/MemberInfobox';\nimport { MemberStats, MemberStatsInner // StatAttribute,\n// Bullet\n} from '../../components/members/MemberStats';\nimport { MemberDetails, MemberDetailsColumn, MemberDetailsRow, MemberDetailsAttrName } from '../../components/members/MemberDetails';\nimport Page from '../../components/layout/Page';\nimport PageContainer from '../../components/layout/PageContainer';\nimport { fetchRequest } from '../../store/members/actions';\nimport styled from '../../utils/styled';\nimport LoadingSpinner from '../../components/data/LoadingSpinner';\nimport TopNavBar from \"../../components/layout/topNavBar/TopNavBar\";\n// const API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || 'https://api.opendota.com';\nconst Wrapper = styled('div')(_templateObject());\n\nclass ShowMembersPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          data = _this$props.data,\n          fetchMembers = _this$props.fetchMembers;\n\n    if (!data || data.length === 0) {\n      fetchMembers();\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          data = _this$props2.data,\n          loading = _this$props2.loading,\n          match = _this$props2.match;\n    const selected = data.find(member => member.id + member.full_name === match.params.memberId);\n    return React.createElement(Page, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(TopNavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(PageContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, loading && React.createElement(LoadingSpinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), selected && React.createElement(React.Fragment, null, React.createElement(MemberInfobox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(MemberInfoboxInner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(MemberInfoboxHeading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(MemberName, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, selected.full_name)), React.createElement(MemberStats, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(MemberStatsInner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(MemberDetailsRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, selected.dafsc))))), React.createElement(MemberDetails, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(MemberDetailsColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(MemberDetailsRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(MemberDetailsAttrName, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"DUTY TITLE:\"), \" \", selected.duty_title), React.createElement(MemberDetailsRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(MemberDetailsAttrName, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Grade:\"), \" \", selected.grade)), React.createElement(MemberDetailsColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(MemberDetailsRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(MemberDetailsAttrName, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Office Symbol:\"), ' ', selected.office_symbol)))))));\n  }\n\n} // It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\n\n\nconst mapStateToProps = ({\n  members\n}) => ({\n  loading: members.loading,\n  errors: members.errors,\n  data: members.data\n}); // mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\n\n\nconst mapDispatchToProps = {\n  fetchMembers: fetchRequest\n}; // Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowMembersPage);","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/pages/members/show.tsx"],"names":["React","connect","MemberInfobox","MemberInfoboxHeading","MemberInfoboxInner","MemberName","MemberStats","MemberStatsInner","MemberDetails","MemberDetailsColumn","MemberDetailsRow","MemberDetailsAttrName","Page","PageContainer","fetchRequest","styled","LoadingSpinner","TopNavBar","Wrapper","ShowMembersPage","Component","constructor","props","state","componentDidMount","data","fetchMembers","length","render","loading","match","selected","find","member","id","full_name","params","memberId","dafsc","duty_title","grade","office_symbol","mapStateToProps","members","errors","mapDispatchToProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router';\n\nimport {\n    MemberInfobox,\n    // MemberInfoboxImage,\n    MemberInfoboxHeading,\n    MemberInfoboxInner,\n    // MemberInfoboxBlurBackground,\n    MemberName,\n    // MemberRoles,\n} from '../../components/members/MemberInfobox';\nimport {\n    MemberStats,\n    MemberStatsInner,\n    // StatAttribute,\n    // Bullet\n} from '../../components/members/MemberStats';\nimport {\n    MemberDetails,\n    MemberDetailsColumn,\n    MemberDetailsRow,\n    MemberDetailsAttrName,\n} from '../../components/members/MemberDetails';\nimport Page from '../../components/layout/Page';\nimport PageContainer from '../../components/layout/PageContainer';\n\nimport { ApplicationState } from '../../store';\nimport { fetchRequest } from '../../store/members/actions';\nimport styled from '../../utils/styled';\nimport LoadingSpinner from '../../components/data/LoadingSpinner';\nimport TopNavBar from \"../../components/layout/topNavBar/TopNavBar\";\nimport MemberModel from \"../../store/members/MemberModel\";\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n    loading: boolean;\n    data: MemberModel[];\n    errors?: string;\n}\n\n// We can use `typeof` here to map our dispatch types to the props, like so.\ninterface PropsFromDispatch {\n    fetchMembers: typeof fetchRequest;\n}\n\ninterface RouteParams {\n    memberId: string;\n}\n\ninterface State {\n    selected?: Member;\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & PropsFromDispatch & RouteComponentProps<RouteParams>;\n\n// const API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || 'https://api.opendota.com';\n\nconst Wrapper = styled('div')`\n    position: relative;\n`;\n\nclass ShowMembersPage extends React.Component<AllProps, State> {\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    public componentDidMount() {\n        const { data, fetchMembers } = this.props;\n\n        if (!data || data.length === 0) {\n            fetchMembers();\n        }\n    }\n\n    public render() {\n        const { data, loading, match } = this.props;\n        const selected = data.find(member => ((member.id + member.full_name) === match.params.memberId));\n\n        return (\n            <Page>\n                <TopNavBar/>\n                <PageContainer>\n                    <Wrapper>\n                        {loading && (\n                                    <LoadingSpinner />\n                        )}\n                        {selected && (\n                            <>\n                                <MemberInfobox>\n                                    <MemberInfoboxInner>\n                                        <MemberInfoboxHeading>\n                                            <MemberName>{selected.full_name}</MemberName>\n                                        </MemberInfoboxHeading>\n                                        <MemberStats>\n                                            <MemberStatsInner>\n                                                <MemberDetailsRow>{selected.dafsc}</MemberDetailsRow>\n                                            </MemberStatsInner>\n                                        </MemberStats>\n                                    </MemberInfoboxInner>\n                                </MemberInfobox>\n                                <MemberDetails>\n                                    <MemberDetailsColumn>\n                                        <MemberDetailsRow>\n                                            <MemberDetailsAttrName>DUTY TITLE:</MemberDetailsAttrName> {selected.duty_title}\n                                        </MemberDetailsRow>\n                                        <MemberDetailsRow>\n                                            <MemberDetailsAttrName>Grade:</MemberDetailsAttrName> {selected.grade}\n                                        </MemberDetailsRow>\n                                    </MemberDetailsColumn>\n                                    <MemberDetailsColumn>\n                                        <MemberDetailsRow>\n                                            <MemberDetailsAttrName>Office Symbol:</MemberDetailsAttrName>{' '}\n                                            {selected.office_symbol}\n                                        </MemberDetailsRow>\n                                    </MemberDetailsColumn>\n                                </MemberDetails>\n                            </>\n                        )}\n                    </Wrapper>\n                </PageContainer>\n            </Page>\n        );\n    }\n}\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ members }: ApplicationState) => ({\n    loading: members.loading,\n    errors: members.errors,\n    data: members.data,\n});\n\n// mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\nconst mapDispatchToProps = {\n    fetchMembers: fetchRequest,\n};\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ShowMembersPage);\n"]},"metadata":{},"sourceType":"module"}