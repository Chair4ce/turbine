{"ast":null,"code":"import*as React from'react';import{Provider}from'react-redux';import{ConnectedRouter}from'connected-react-router';import{ThemeProvider}from'emotion-theming';import Routes from'./routes';import LayoutContainer from'./containers/LayoutContainer';import*as themes from'./styles/theme';// Any additional component props go here.\n// Create an intersection type of the component props and our Redux props.\nvar Main=function Main(_ref){var store=_ref.store,history=_ref.history;return React.createElement(Provider,{store:store},React.createElement(ConnectedRouter,{history:history},React.createElement(LayoutContainer,null,function(_ref2){var theme=_ref2.theme;return React.createElement(ThemeProvider,{theme:themes[theme]},React.createElement(Routes,null));})));};// Normally you wouldn't need any generics here (since types infer from the passed functions).\n// But since we pass some props from the `index.js` file, we have to include them.\n// For an example of a `connect` function without generics, see `./containers/LayoutContainer`.\nexport default Main;","map":{"version":3,"sources":["/Users/ridley/workspace/turbine/client/src/main.tsx"],"names":["React","Provider","ConnectedRouter","ThemeProvider","Routes","LayoutContainer","themes","Main","store","history","theme"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,QAAT,KAAyB,aAAzB,CACA,OAASC,eAAT,KAAgC,wBAAhC,CAGA,OAASC,aAAT,KAA8B,iBAA9B,CAEA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CAEA,MAAOC,CAAAA,eAAP,KAA4B,8BAA5B,CACA,MAAO,GAAKC,CAAAA,MAAZ,KAAwB,gBAAxB,CAEA;AAMA;AACA,GAAMC,CAAAA,IAAyB,CAAG,QAA5BA,CAAAA,IAA4B,MAAwB,IAArBC,CAAAA,KAAqB,MAArBA,KAAqB,CAAdC,OAAc,MAAdA,OAAc,CACtD,MACI,qBAAC,QAAD,EAAU,KAAK,CAAED,KAAjB,EACI,oBAAC,eAAD,EAAiB,OAAO,CAAEC,OAA1B,EACI,oBAAC,eAAD,MACK,mBAAGC,CAAAA,KAAH,OAAGA,KAAH,OACG,qBAAC,aAAD,EAAe,KAAK,CAAEJ,MAAM,CAACI,KAAD,CAA5B,EACI,oBAAC,MAAD,MADJ,CADH,EADL,CADJ,CADJ,CADJ,CAaH,CAdD,CAgBA;AACA;AACA;AACA,cAAeH,CAAAA,IAAf","sourcesContent":["import * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Store } from 'redux';\nimport { History } from 'history';\nimport { ThemeProvider } from 'emotion-theming';\n\nimport Routes from './routes';\nimport { ApplicationState } from './store';\nimport LayoutContainer from './containers/LayoutContainer';\nimport * as themes from './styles/theme';\n\n// Any additional component props go here.\ninterface MainProps {\n    store: Store<ApplicationState>;\n    history: History;\n}\n\n// Create an intersection type of the component props and our Redux props.\nconst Main: React.FC<MainProps> = ({ store, history }) => {\n    return (\n        <Provider store={store}>\n            <ConnectedRouter history={history}>\n                <LayoutContainer>\n                    {({ theme }) => (\n                        <ThemeProvider theme={themes[theme]}>\n                            <Routes />\n                        </ThemeProvider>\n                    )}\n                </LayoutContainer>\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\n// Normally you wouldn't need any generics here (since types infer from the passed functions).\n// But since we pass some props from the `index.js` file, we have to include them.\n// For an example of a `connect` function without generics, see `./containers/LayoutContainer`.\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}