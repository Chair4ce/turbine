{"ast":null,"code":"var _jsxFileName = \"/Users/chairforce/workspace/turbyne/client/src/pages/members.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport MembersIndexPage from './members/index';\nimport ShowMembersPage from './members/show';\n\nconst MembersPage = ({\n  match\n}) => {\n  return React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"\".concat(match.path, \"/\"),\n    component: MembersIndexPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"\".concat(match.path, \"/:memberId\"),\n    component: ShowMembersPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n}; // It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\n\n\nconst mapStateToProps = ({\n  members\n}) => ({\n  loading: members.loading,\n  errors: members.errors,\n  data: members.data\n}); // Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\n\n\nexport default connect(mapStateToProps)(MembersPage);","map":{"version":3,"sources":["/Users/chairforce/workspace/turbyne/client/src/pages/members.tsx"],"names":["React","connect","Route","Switch","MembersIndexPage","ShowMembersPage","MembersPage","match","path","mapStateToProps","members","loading","errors","data"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAA8BC,KAA9B,EAAqCC,MAArC,QAAmD,kBAAnD;AAEA,OAAOC,gBAAP,MAA6B,iBAA7B;AACA,OAAOC,eAAP,MAA4B,gBAA5B;;AAeA,MAAMC,WAA+B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACnD,SACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,YAAKA,KAAK,CAACC,IAAX,MAAjB;AAAqC,IAAA,SAAS,EAAEJ,gBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,KAAD;AAAO,IAAA,IAAI,YAAKG,KAAK,CAACC,IAAX,eAAX;AAAwC,IAAA,SAAS,EAAEH,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CAPD,C,CASA;AACA;AACA;;;AACA,MAAMI,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,MAAoC;AACxDC,EAAAA,OAAO,EAAED,OAAO,CAACC,OADuC;AAExDC,EAAAA,MAAM,EAAEF,OAAO,CAACE,MAFwC;AAGxDC,EAAAA,IAAI,EAAEH,OAAO,CAACG;AAH0C,CAApC,CAAxB,C,CAMA;AACA;;;AACA,eAAeZ,OAAO,CAACQ,eAAD,CAAP,CAAyBH,WAAzB,CAAf","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps, Route, Switch } from 'react-router-dom';\n\nimport MembersIndexPage from './members/index';\nimport ShowMembersPage from './members/show';\n\nimport { ApplicationState } from '../store';\nimport { Member } from '../store/members/types';\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n    loading: boolean;\n    data: Member[];\n    errors?: string;\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & RouteComponentProps;\n\nconst MembersPage: React.FC<AllProps> = ({ match }) => {\n    return (\n        <Switch>\n            <Route exact path={`${match.path}/`} component={MembersIndexPage} />\n            <Route path={`${match.path}/:memberId`} component={ShowMembersPage} />\n        </Switch>\n    );\n};\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ members }: ApplicationState) => ({\n    loading: members.loading,\n    errors: members.errors,\n    data: members.data,\n});\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(mapStateToProps)(MembersPage);\n"]},"metadata":{},"sourceType":"module"}