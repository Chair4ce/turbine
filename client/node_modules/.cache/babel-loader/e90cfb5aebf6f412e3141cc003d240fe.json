{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga'; // `react-router-redux` is deprecated, so we use `connected-react-router`.\n// This provides a Redux middleware which connects to our `react-router` instance.\n\nimport { routerMiddleware } from 'connected-react-router'; // We'll be using Redux Devtools. We can use the `composeWithDevTools()`\n// directive so we can pass our middleware along with it\n\nimport { composeWithDevTools } from 'redux-devtools-extension'; // If you use react-router, don't forget to pass in your history type.\n\n// Import the state interface and our combined reducers/sagas.\nimport { createRootReducer, rootSaga } from './store';\nexport default function configureStore(history, initialState) {\n  // create the composing function for our middlewares\n  const composeEnhancers = composeWithDevTools({}); // create the redux-saga middleware\n\n  const sagaMiddleware = createSagaMiddleware(); // We'll create our store with the combined reducers/sagas, and the initial Redux state that\n  // we'll be passing from our entry point.\n\n  const store = createStore(createRootReducer(history), initialState, composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware))); // Don't forget to run the root saga, and return the store object.\n\n  sagaMiddleware.run(rootSaga);\n  return store;\n}","map":{"version":3,"sources":["/Users/ridley/workspace/turbine/client/src/configureStore.ts"],"names":["createStore","applyMiddleware","createSagaMiddleware","routerMiddleware","composeWithDevTools","createRootReducer","rootSaga","configureStore","history","initialState","composeEnhancers","sagaMiddleware","store","run"],"mappings":"AAAA,SAAgBA,WAAhB,EAA6BC,eAA7B,QAAoD,OAApD;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CACA;AACA;;AACA,SAASC,gBAAT,QAAiC,wBAAjC,C,CACA;AACA;;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CACA;;AAGA;AACA,SAA2BC,iBAA3B,EAA8CC,QAA9C,QAA8D,SAA9D;AAEA,eAAe,SAASC,cAAT,CAAwBC,OAAxB,EAA0CC,YAA1C,EAAmG;AAC9G;AACA,QAAMC,gBAAgB,GAAGN,mBAAmB,CAAC,EAAD,CAA5C,CAF8G,CAG9G;;AACA,QAAMO,cAAc,GAAGT,oBAAoB,EAA3C,CAJ8G,CAM9G;AACA;;AACA,QAAMU,KAAK,GAAGZ,WAAW,CACrBK,iBAAiB,CAACG,OAAD,CADI,EAErBC,YAFqB,EAGrBC,gBAAgB,CAACT,eAAe,CAACE,gBAAgB,CAACK,OAAD,CAAjB,EAA4BG,cAA5B,CAAhB,CAHK,CAAzB,CAR8G,CAc9G;;AACAA,EAAAA,cAAc,CAACE,GAAf,CAAmBP,QAAnB;AACA,SAAOM,KAAP;AACH","sourcesContent":["import { Store, createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n// `react-router-redux` is deprecated, so we use `connected-react-router`.\n// This provides a Redux middleware which connects to our `react-router` instance.\nimport { routerMiddleware } from 'connected-react-router';\n// We'll be using Redux Devtools. We can use the `composeWithDevTools()`\n// directive so we can pass our middleware along with it\nimport { composeWithDevTools } from 'redux-devtools-extension';\n// If you use react-router, don't forget to pass in your history type.\nimport { History } from 'history';\n\n// Import the state interface and our combined reducers/sagas.\nimport { ApplicationState, createRootReducer, rootSaga } from './store';\n\nexport default function configureStore(history: History, initialState: ApplicationState): Store<ApplicationState> {\n    // create the composing function for our middlewares\n    const composeEnhancers = composeWithDevTools({});\n    // create the redux-saga middleware\n    const sagaMiddleware = createSagaMiddleware();\n\n    // We'll create our store with the combined reducers/sagas, and the initial Redux state that\n    // we'll be passing from our entry point.\n    const store = createStore(\n        createRootReducer(history),\n        initialState,\n        composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware)),\n    );\n\n    // Don't forget to run the root saga, and return the store object.\n    sagaMiddleware.run(rootSaga);\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}