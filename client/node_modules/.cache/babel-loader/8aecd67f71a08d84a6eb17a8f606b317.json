{"ast":null,"code":"// This file holds our state type, as well as any other types related to this Redux store.\n// Response object for GET /members\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport let MembersActionTypes; // Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\n\n(function (MembersActionTypes) {\n  MembersActionTypes[\"FETCH_REQUEST\"] = \"@@members/FETCH_REQUEST\";\n  MembersActionTypes[\"FETCH_SUCCESS\"] = \"@@members/FETCH_SUCCESS\";\n  MembersActionTypes[\"FETCH_ERROR\"] = \"@@members/FETCH_ERROR\";\n  MembersActionTypes[\"SELECT_MEMBER\"] = \"@@members/SELECT_MEMBER\";\n  MembersActionTypes[\"SELECTED\"] = \"@@members/SELECTED\";\n})(MembersActionTypes || (MembersActionTypes = {}));","map":{"version":3,"sources":["/Users/chairforce/workspace/turbyne/client/src/store/members/types.ts"],"names":["MembersActionTypes"],"mappings":"AAAA;AAEA;AAgBA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,WAAYA,kBAAZ,C,CAQA;AACA;;WATYA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB","sourcesContent":["// This file holds our state type, as well as any other types related to this Redux store.\n\n// Response object for GET /members\n\nexport interface Member extends ApiResponse {\n    id: string;\n    full_name: string;\n    grade: string;\n    assigned_pas: string;\n    dafsc: string;\n    office_symbol: string;\n    duty_title: string;\n    duty_start_date: string;\n    duty_phone: string;\n    awardec_status: string;\n    epr_opr_status: string;\n}\n\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\nexport type ApiResponse = Record<string, any>;\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport enum MembersActionTypes {\n    FETCH_REQUEST = '@@members/FETCH_REQUEST',\n    FETCH_SUCCESS = '@@members/FETCH_SUCCESS',\n    FETCH_ERROR = '@@members/FETCH_ERROR',\n    SELECT_MEMBER = '@@members/SELECT_MEMBER',\n    SELECTED = '@@members/SELECTED',\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface MembersState {\n    readonly loading: boolean;\n    readonly data: Member[];\n    readonly errors?: string;\n}\n"]},"metadata":{},"sourceType":"module"}