{"ast":null,"code":"// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport let FlightActionTypes; // Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\n\n(function (FlightActionTypes) {\n  FlightActionTypes[\"FETCH_REQUEST\"] = \"@@flights/FETCH_REQUEST\";\n  FlightActionTypes[\"FETCH_SUCCESS\"] = \"@@flights/FETCH_SUCCESS\";\n  FlightActionTypes[\"FETCH_ERROR\"] = \"@@flights/FETCH_ERROR\";\n})(FlightActionTypes || (FlightActionTypes = {}));","map":{"version":3,"sources":["/Users/ridley/workspace/turbine/client/src/store/flights/types.ts"],"names":["FlightActionTypes"],"mappings":"AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA,WAAYA,iBAAZ,C,CAMA;AACA;;WAPYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB","sourcesContent":["\n\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nimport FlightModel from \"./FlightModel\";\n\nexport enum FlightActionTypes {\n    FETCH_REQUEST = '@@flights/FETCH_REQUEST',\n    FETCH_SUCCESS = '@@flights/FETCH_SUCCESS',\n    FETCH_ERROR = '@@flights/FETCH_ERROR',\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface FlightsState {\n    readonly loading: boolean;\n    readonly flights: FlightModel[];\n    readonly errors?: string;\n}\n"]},"metadata":{},"sourceType":"module"}