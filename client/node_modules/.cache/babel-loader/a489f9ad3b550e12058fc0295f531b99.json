{"ast":null,"code":"// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport let SquadronActionTypes; // Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\n\n(function (SquadronActionTypes) {\n  SquadronActionTypes[\"FETCH_REQUEST\"] = \"@@squadrons/FETCH_REQUEST\";\n  SquadronActionTypes[\"FETCH_SUCCESS\"] = \"@@squadrons/FETCH_SUCCESS\";\n  SquadronActionTypes[\"FETCH_ERROR\"] = \"@@squadrons/FETCH_ERROR\";\n  SquadronActionTypes[\"POST_REQUEST\"] = \"@@squadrons/POST_REQUEST\";\n  SquadronActionTypes[\"POST_SUCCESS\"] = \"@@squadrons/POST_SUCCESS\";\n  SquadronActionTypes[\"POST_ERROR\"] = \"@@squadrons/POST_ERROR\";\n  SquadronActionTypes[\"SHOW_INPUT\"] = \"@@squadrons/SHOW_INPUT\";\n  SquadronActionTypes[\"UPDATE_INPUT\"] = \"@@squadrons/UPDATE_INPUT\";\n})(SquadronActionTypes || (SquadronActionTypes = {}));","map":{"version":3,"sources":["/Users/ridley/workspace/turbine/client/src/store/squadrons/types.ts"],"names":["SquadronActionTypes"],"mappings":"AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA,WAAYA,mBAAZ,C,CAWA;AACA;;WAZYA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB","sourcesContent":["\n\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nimport SquadronModel from \"./SquadronModel\";\n\nexport enum SquadronActionTypes {\n    FETCH_REQUEST = '@@squadrons/FETCH_REQUEST',\n    FETCH_SUCCESS = '@@squadrons/FETCH_SUCCESS',\n    FETCH_ERROR = '@@squadrons/FETCH_ERROR',\n    POST_REQUEST = '@@squadrons/POST_REQUEST',\n    POST_SUCCESS = '@@squadrons/POST_SUCCESS',\n    POST_ERROR = '@@squadrons/POST_ERROR',\n    SHOW_INPUT = '@@squadrons/SHOW_INPUT',\n    UPDATE_INPUT = '@@squadrons/UPDATE_INPUT'\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface SquadronsState {\n    readonly loading: boolean;\n    readonly squadrons: SquadronModel[];\n    readonly showInput: boolean;\n    readonly newInput: SquadronModel | undefined;\n    readonly posting: boolean;\n    readonly errors?: string;\n}\n"]},"metadata":{},"sourceType":"module"}