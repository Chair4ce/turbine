{"ast":null,"code":"import _defineProperty from \"/Users/chairforce/workspace/turbyne/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { LayoutActionTypes } from './types'; // Type-safe initialState!\n\nexport const initialState = {\n  theme: 'dark'\n}; // Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LayoutActionTypes.SET_THEME:\n      {\n        return _objectSpread({}, state, {\n          theme: action.payload\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}; // Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\n\n\nexport { reducer as layoutReducer };","map":{"version":3,"sources":["/Users/chairforce/workspace/turbyne/client/src/store/layout/reducer.ts"],"names":["LayoutActionTypes","initialState","theme","reducer","state","action","type","SET_THEME","payload","layoutReducer"],"mappings":";;;;;;AACA,SAAsBA,iBAAtB,QAA+C,SAA/C,C,CAEA;;AACA,OAAO,MAAMC,YAAyB,GAAG;AACrCC,EAAAA,KAAK,EAAE;AAD8B,CAAlC,C,CAIP;AACA;;AACA,MAAMC,OAA6B,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACpE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,iBAAiB,CAACO,SAAvB;AAAkC;AAC9B,iCAAYH,KAAZ;AAAmBF,UAAAA,KAAK,EAAEG,MAAM,CAACG;AAAjC;AACH;;AACD;AAAS;AACL,eAAOJ,KAAP;AACH;AANL;AAQH,CATD,C,CAWA;AACA;;;AACA,SAASD,OAAO,IAAIM,aAApB","sourcesContent":["import { Reducer } from 'redux';\nimport { LayoutState, LayoutActionTypes } from './types';\n\n// Type-safe initialState!\nexport const initialState: LayoutState = {\n    theme: 'dark',\n};\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<LayoutState> = (state = initialState, action) => {\n    switch (action.type) {\n        case LayoutActionTypes.SET_THEME: {\n            return { ...state, theme: action.payload };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as layoutReducer };\n"]},"metadata":{},"sourceType":"module"}