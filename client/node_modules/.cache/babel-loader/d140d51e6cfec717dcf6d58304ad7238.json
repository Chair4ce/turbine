{"ast":null,"code":"import _regeneratorRuntime from\"/Users/chairforce/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(handleFetch),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchFetchRequest),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(AETSaga);import{all,call,fork,put,takeEvery}from'redux-saga/effects';import{AETActionTypes}from'./types';import{AETsFetchError,AETsFetchSuccess}from'./actions';import{callApi}from'../../utils/api';var API_ENDPOINT='http://localhost:8080';function handleFetch(){var res;return _regeneratorRuntime.wrap(function handleFetch$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(callApi,'get',API_ENDPOINT,'api/AETs');case 3:res=_context.sent;if(!res.error){_context.next=9;break;}_context.next=7;return put(AETsFetchError(res.error));case 7:_context.next=11;break;case 9:_context.next=11;return put(AETsFetchSuccess(res));case 11:_context.next=22;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);if(!(_context.t0 instanceof Error&&_context.t0.stack)){_context.next=20;break;}_context.next=18;return put(AETsFetchError(_context.t0.stack));case 18:_context.next=22;break;case 20:_context.next=22;return put(AETsFetchError('An unknown error occured.'));case 22:case\"end\":return _context.stop();}}},_marked,null,[[0,13]]);}// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction watchFetchRequest(){return _regeneratorRuntime.wrap(function watchFetchRequest$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(AETActionTypes.FETCH_REQUEST,handleFetch);case 2:case\"end\":return _context2.stop();}}},_marked2);}// We can also use `fork()` here to split our saga into multiple watchers.\nfunction AETSaga(){return _regeneratorRuntime.wrap(function AETSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([fork(watchFetchRequest)]);case 2:case\"end\":return _context3.stop();}}},_marked3);}export default AETSaga;","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/store/AETs/sagas.ts"],"names":["handleFetch","watchFetchRequest","AETSaga","all","call","fork","put","takeEvery","AETActionTypes","AETsFetchError","AETsFetchSuccess","callApi","API_ENDPOINT","res","error","Error","stack","FETCH_REQUEST"],"mappings":"0MAOUA,W,iDAqBAC,iB,iDAKAC,O,EAjCV,OAASC,GAAT,CAAcC,IAAd,CAAoBC,IAApB,CAA0BC,GAA1B,CAA+BC,SAA/B,KAAgD,oBAAhD,CACA,OAASC,cAAT,KAA+B,SAA/B,CACA,OAASC,cAAT,CAAyBC,gBAAzB,KAAiD,WAAjD,CACA,OAASC,OAAT,KAAwB,iBAAxB,CAEA,GAAMC,CAAAA,YAAY,CAAG,uBAArB,CAEA,QAAUZ,CAAAA,WAAV,+JAGoB,MAAMI,CAAAA,IAAI,CAACO,OAAD,CAAU,KAAV,CAAiBC,YAAjB,CAA+B,UAA/B,CAAV,CAHpB,OAGcC,GAHd,mBAKYA,GAAG,CAACC,KALhB,yCAMY,MAAMR,CAAAA,GAAG,CAACG,cAAc,CAACI,GAAG,CAACC,KAAL,CAAf,CAAT,CANZ,sDAQY,MAAMR,CAAAA,GAAG,CAACI,gBAAgB,CAACG,GAAD,CAAjB,CAAT,CARZ,8FAWY,sBAAeE,CAAAA,KAAf,EAAwB,YAAIC,KAXxC,4CAYY,MAAMV,CAAAA,GAAG,CAACG,cAAc,CAAC,YAAIO,KAAL,CAAf,CAAT,CAZZ,wDAcY,MAAMV,CAAAA,GAAG,CAACG,cAAc,CAAC,2BAAD,CAAf,CAAT,CAdZ,qEAmBA;AACA;AACA,QAAUR,CAAAA,iBAAV,iJACI,MAAMM,CAAAA,SAAS,CAACC,cAAc,CAACS,aAAhB,CAA+BjB,WAA/B,CAAf,CADJ,wDAIA;AACA,QAAUE,CAAAA,OAAV,uIACI,MAAMC,CAAAA,GAAG,CAAC,CAACE,IAAI,CAACJ,iBAAD,CAAL,CAAD,CAAT,CADJ,wDAIA,cAAeC,CAAAA,OAAf","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { AETActionTypes } from './types';\nimport { AETsFetchError, AETsFetchSuccess } from './actions';\nimport { callApi } from '../../utils/api';\n\nconst API_ENDPOINT = 'http://localhost:8080';\n\nfunction *handleFetch() {\n    try {\n        // To call async functions, use redux-saga's `call()`.\n        const res = yield call(callApi, 'get', API_ENDPOINT, 'api/AETs');\n\n        if (res.error) {\n            yield put(AETsFetchError(res.error));\n        } else {\n            yield put(AETsFetchSuccess(res));\n        }\n    } catch (err) {\n        if (err instanceof Error && err.stack) {\n            yield put(AETsFetchError(err.stack));\n        } else {\n            yield put(AETsFetchError('An unknown error occured.'));\n        }\n    }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction *watchFetchRequest() {\n    yield takeEvery(AETActionTypes.FETCH_REQUEST, handleFetch);\n}\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction *AETSaga() {\n    yield all([fork(watchFetchRequest)]);\n}\n\nexport default AETSaga;"]},"metadata":{},"sourceType":"module"}