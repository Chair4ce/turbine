{"ast":null,"code":"import _defineProperty from \"/Users/chairforce/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SquadronActionTypes } from './types';\nimport { postNewSquadron } from \"./sagas\"; // Type-safe initialState!\n\nexport const initialState = {\n  squadrons: [],\n  newInput: {},\n  errors: undefined,\n  loading: false,\n  showInput: false,\n  posting: false\n}; // Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SquadronActionTypes.FETCH_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          loading: true\n        });\n      }\n\n    case SquadronActionTypes.FETCH_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          loading: false,\n          squadrons: action.payload\n        });\n      }\n\n    case SquadronActionTypes.FETCH_ERROR:\n      {\n        return _objectSpread({}, state, {\n          loading: false,\n          errors: action.payload\n        });\n      }\n\n    case SquadronActionTypes.SHOW_INPUT:\n      {\n        return _objectSpread({}, state, {\n          showInput: !state.showInput\n        });\n      }\n\n    case SquadronActionTypes.POST_REQUEST:\n      {\n        console.log(\"posting\");\n        postNewSquadron(action.payload);\n        return _objectSpread({}, state, {\n          posting: true\n        });\n      }\n\n    case SquadronActionTypes.POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          showInput: false,\n          posting: false\n        });\n      }\n\n    case SquadronActionTypes.UPDATE_INPUT:\n      {\n        console.log(state.newInput);\n        return _objectSpread({}, state, {\n          newInput: action.payload\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}; // Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\n\n\nexport { reducer as squadronsReducer };","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/store/squadrons/reducer.ts"],"names":["SquadronActionTypes","postNewSquadron","initialState","squadrons","newInput","errors","undefined","loading","showInput","posting","reducer","state","action","type","FETCH_REQUEST","FETCH_SUCCESS","payload","FETCH_ERROR","SHOW_INPUT","POST_REQUEST","console","log","POST_SUCCESS","UPDATE_INPUT","squadronsReducer"],"mappings":";;;;;;AACA,SAAyBA,mBAAzB,QAAoD,SAApD;AAEA,SAAQC,eAAR,QAA8B,SAA9B,C,CAEA;;AACA,OAAO,MAAMC,YAA4B,GAAG;AACxCC,EAAAA,SAAS,EAAE,EAD6B;AAExCC,EAAAA,QAAQ,EAAE,EAF8B;AAGxCC,EAAAA,MAAM,EAAEC,SAHgC;AAIxCC,EAAAA,OAAO,EAAE,KAJ+B;AAKxCC,EAAAA,SAAS,EAAE,KAL6B;AAMxCC,EAAAA,OAAO,EAAE;AAN+B,CAArC,C,CASP;AACA;;AACA,MAAMC,OAAgC,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AACvE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,mBAAmB,CAACc,aAAzB;AAAwC;AACpC,iCACOH,KADP;AAEIJ,UAAAA,OAAO,EAAE;AAFb;AAIH;;AACD,SAAKP,mBAAmB,CAACe,aAAzB;AAAwC;AACpC,iCAAYJ,KAAZ;AAAmBJ,UAAAA,OAAO,EAAE,KAA5B;AAAmCJ,UAAAA,SAAS,EAAES,MAAM,CAACI;AAArD;AACH;;AACD,SAAKhB,mBAAmB,CAACiB,WAAzB;AAAsC;AAClC,iCAAYN,KAAZ;AAAmBJ,UAAAA,OAAO,EAAE,KAA5B;AAAmCF,UAAAA,MAAM,EAAEO,MAAM,CAACI;AAAlD;AACH;;AACD,SAAKhB,mBAAmB,CAACkB,UAAzB;AAAqC;AACjC,iCACOP,KADP;AAEIH,UAAAA,SAAS,EAAE,CAACG,KAAK,CAACH;AAFtB;AAIH;;AACD,SAAKR,mBAAmB,CAACmB,YAAzB;AAAuC;AACnCC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACApB,QAAAA,eAAe,CAACW,MAAM,CAACI,OAAR,CAAf;AACA,iCACOL,KADP;AAEIF,UAAAA,OAAO,EAAE;AAFb;AAIH;;AACD,SAAKT,mBAAmB,CAACsB,YAAzB;AAAuC;AACnC,iCACOX,KADP;AAEIH,UAAAA,SAAS,EAAE,KAFf;AAGIC,UAAAA,OAAO,EAAE;AAHb;AAKH;;AACD,SAAKT,mBAAmB,CAACuB,YAAzB;AAAuC;AACnCH,QAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACP,QAAlB;AACA,iCACOO,KADP;AAEIP,UAAAA,QAAQ,EAAEQ,MAAM,CAACI;AAFrB;AAIH;;AACD;AAAS;AACL,eAAOL,KAAP;AACH;AA3CL;AA6CH,CA9CD,C,CAgDA;AACA;;;AACA,SAASD,OAAO,IAAIc,gBAApB","sourcesContent":["import { Reducer } from 'redux';\nimport { SquadronsState, SquadronActionTypes } from './types';\nimport SquadronModel from \"./SquadronModel\";\nimport {postNewSquadron} from \"./sagas\";\n\n// Type-safe initialState!\nexport const initialState: SquadronsState = {\n    squadrons: [] as SquadronModel[],\n    newInput: {} as SquadronModel,\n    errors: undefined,\n    loading: false,\n    showInput: false,\n    posting: false,\n};\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<SquadronsState> = (state = initialState, action) => {\n    switch (action.type) {\n        case SquadronActionTypes.FETCH_REQUEST: {\n            return {\n                ...state,\n                loading: true\n            };\n        }\n        case SquadronActionTypes.FETCH_SUCCESS: {\n            return { ...state, loading: false, squadrons: action.payload };\n        }\n        case SquadronActionTypes.FETCH_ERROR: {\n            return { ...state, loading: false, errors: action.payload };\n        }\n        case SquadronActionTypes.SHOW_INPUT: {\n            return {\n                ...state,\n                showInput: !state.showInput\n            };\n        }\n        case SquadronActionTypes.POST_REQUEST: {\n            console.log(\"posting\");\n            postNewSquadron(action.payload);\n            return {\n                ...state,\n                posting: true\n            };\n        }\n        case SquadronActionTypes.POST_SUCCESS: {\n            return {\n                ...state,\n                showInput: false,\n                posting: false\n            };\n        }\n        case SquadronActionTypes.UPDATE_INPUT: {\n            console.log(state.newInput);\n            return {\n                ...state,\n                newInput: action.payload\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as squadronsReducer };"]},"metadata":{},"sourceType":"module"}