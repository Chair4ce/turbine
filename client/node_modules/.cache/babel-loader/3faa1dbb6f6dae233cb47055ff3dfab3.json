{"ast":null,"code":"import _asyncToGenerator from\"/Users/ridley/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _regeneratorRuntime from\"/Users/ridley/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(handleFetch),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchFetchRequest),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(squadronSaga);import{all,call,fork,put,takeEvery}from'redux-saga/effects';import{SquadronActionTypes}from'./types';import{squadronPostSuccess,squadronsFetchError,squadronsFetchSuccess}from'./actions';import{callApi}from'../../utils/api';function handleFetch(){var res;return _regeneratorRuntime.wrap(function handleFetch$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(callApi,'get','api/squadrons');case 3:res=_context.sent;if(!res.error){_context.next=9;break;}_context.next=7;return put(squadronsFetchError(res.error));case 7:_context.next=11;break;case 9:_context.next=11;return put(squadronsFetchSuccess(res));case 11:_context.next=22;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);if(!(_context.t0 instanceof Error&&_context.t0.stack)){_context.next=20;break;}_context.next=18;return put(squadronsFetchError(_context.t0.stack));case 18:_context.next=22;break;case 20:_context.next=22;return put(squadronsFetchError('An unknown error occured.'));case 22:case\"end\":return _context.stop();}}},_marked,null,[[0,13]]);}export function postNewSquadron(_x){return _postNewSquadron.apply(this,arguments);}// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction _postNewSquadron(){_postNewSquadron=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(data){var res;return _regeneratorRuntime.wrap(function _callee$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return callApi('post','api/squadrons/add',data);case 2:res=_context4.sent;_context4.next=5;return res.json;case 5:if(!_context4.sent){_context4.next=7;break;}squadronPostSuccess();case 7:case\"end\":return _context4.stop();}}},_callee);}));return _postNewSquadron.apply(this,arguments);}function watchFetchRequest(){return _regeneratorRuntime.wrap(function watchFetchRequest$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(SquadronActionTypes.FETCH_REQUEST,handleFetch);case 2:case\"end\":return _context2.stop();}}},_marked2);}// We can also use `fork()` here to split our saga into multiple watchers.\nfunction squadronSaga(){return _regeneratorRuntime.wrap(function squadronSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([fork(watchFetchRequest)]);case 2:case\"end\":return _context3.stop();}}},_marked3);}export default squadronSaga;","map":{"version":3,"sources":["/Users/ridley/workspace/turbine/client/src/store/squadrons/sagas.ts"],"names":["handleFetch","watchFetchRequest","squadronSaga","all","call","fork","put","takeEvery","SquadronActionTypes","squadronPostSuccess","squadronsFetchError","squadronsFetchSuccess","callApi","res","error","Error","stack","postNewSquadron","data","json","FETCH_REQUEST"],"mappings":"yWAOUA,W,iDA6BAC,iB,iDAKAC,Y,EAzCV,OAASC,GAAT,CAAcC,IAAd,CAAoBC,IAApB,CAA0BC,GAA1B,CAA+BC,SAA/B,KAAgD,oBAAhD,CACA,OAASC,mBAAT,KAAoC,SAApC,CACA,OAA2BC,mBAA3B,CAAgDC,mBAAhD,CAAqEC,qBAArE,KAAiG,WAAjG,CACA,OAASC,OAAT,KAAwB,iBAAxB,CAIA,QAAUZ,CAAAA,WAAV,+JAGoB,MAAMI,CAAAA,IAAI,CAACQ,OAAD,CAAU,KAAV,CAAiB,eAAjB,CAAV,CAHpB,OAGcC,GAHd,mBAKYA,GAAG,CAACC,KALhB,yCAMY,MAAMR,CAAAA,GAAG,CAACI,mBAAmB,CAACG,GAAG,CAACC,KAAL,CAApB,CAAT,CANZ,sDAQY,MAAMR,CAAAA,GAAG,CAACK,qBAAqB,CAACE,GAAD,CAAtB,CAAT,CARZ,8FAWY,sBAAeE,CAAAA,KAAf,EAAwB,YAAIC,KAXxC,4CAYY,MAAMV,CAAAA,GAAG,CAACI,mBAAmB,CAAC,YAAIM,KAAL,CAApB,CAAT,CAZZ,wDAcY,MAAMV,CAAAA,GAAG,CAACI,mBAAmB,CAAC,2BAAD,CAApB,CAAT,CAdZ,qEAmBA,eAAsBO,CAAAA,eAAtB,oDAQA;AACA;qGATO,iBAA+BC,IAA/B,oJAEmBN,CAAAA,OAAO,CAAC,MAAD,CAAS,mBAAT,CAA8BM,IAA9B,CAF1B,QAEOL,GAFP,uCAGOA,CAAAA,GAAG,CAACM,IAHX,oDAICV,mBAAmB,GAJpB,uD,kDAUP,QAAUR,CAAAA,iBAAV,iJACI,MAAMM,CAAAA,SAAS,CAACC,mBAAmB,CAACY,aAArB,CAAoCpB,WAApC,CAAf,CADJ,wDAIA;AACA,QAAUE,CAAAA,YAAV,4IACI,MAAMC,CAAAA,GAAG,CAAC,CAACE,IAAI,CAACJ,iBAAD,CAAL,CAAD,CAAT,CADJ,wDAIA,cAAeC,CAAAA,YAAf","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { SquadronActionTypes } from './types';\nimport {squadronPostError, squadronPostSuccess, squadronsFetchError, squadronsFetchSuccess} from './actions';\nimport { callApi } from '../../utils/api';\nimport SquadronModel from \"./SquadronModel\";\n\n\nfunction *handleFetch() {\n    try {\n        // To call async functions, use redux-saga's `call()`.\n        const res = yield call(callApi, 'get', 'api/squadrons');\n\n        if (res.error) {\n            yield put(squadronsFetchError(res.error));\n        } else {\n            yield put(squadronsFetchSuccess(res));\n        }\n    } catch (err) {\n        if (err instanceof Error && err.stack) {\n            yield put(squadronsFetchError(err.stack));\n        } else {\n            yield put(squadronsFetchError('An unknown error occured.'));\n        }\n    }\n}\n\nexport async function postNewSquadron(data: SquadronModel) {\n        // To call async functions, use redux-saga's `call()`.\n        const res = await callApi('post', 'api/squadrons/add', data);\n    if (await res.json) {\n        squadronPostSuccess();\n    }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction *watchFetchRequest() {\n    yield takeEvery(SquadronActionTypes.FETCH_REQUEST, handleFetch);\n}\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction *squadronSaga() {\n    yield all([fork(watchFetchRequest)]);\n}\n\nexport default squadronSaga;"]},"metadata":{},"sourceType":"module"}