{"ast":null,"code":"import _defineProperty from \"/Users/chairforce/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SquadronActionTypes } from './types';\n// Type-safe initialState!\nexport const initialState = {\n  squadrons: [],\n  newSquadron: null,\n  errors: undefined,\n  loading: false,\n  addingSquadron: false,\n  saving: false\n}; // Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SquadronActionTypes.FETCH_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          loading: true\n        });\n      }\n\n    case SquadronActionTypes.FETCH_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          loading: false,\n          squadrons: action.payload\n        });\n      }\n\n    case SquadronActionTypes.FETCH_ERROR:\n      {\n        return _objectSpread({}, state, {\n          loading: false,\n          errors: action.payload\n        });\n      }\n\n    case SquadronActionTypes.ADDING_SQUADRON:\n      {\n        return _objectSpread({}, state, {\n          addingSquadron: true\n        });\n      }\n\n    case SquadronActionTypes.SAVE_SQUADRON:\n      {\n        return _objectSpread({}, state, {\n          saving: true\n        });\n      }\n\n    case SquadronActionTypes.SAVE_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          addingSquadron: false,\n          saving: false\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}; // Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\n\n\nexport { reducer as squadronsReducer };","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/store/squadrons/reducer.ts"],"names":["SquadronActionTypes","initialState","squadrons","newSquadron","errors","undefined","loading","addingSquadron","saving","reducer","state","action","type","FETCH_REQUEST","FETCH_SUCCESS","payload","FETCH_ERROR","ADDING_SQUADRON","SAVE_SQUADRON","SAVE_SUCCESS","squadronsReducer"],"mappings":";;;;;;AACA,SAAyBA,mBAAzB,QAAoD,SAApD;AAGA;AACA,OAAO,MAAMC,YAA4B,GAAG;AACxCC,EAAAA,SAAS,EAAE,EAD6B;AAExCC,EAAAA,WAAW,EAAE,IAF2B;AAGxCC,EAAAA,MAAM,EAAEC,SAHgC;AAIxCC,EAAAA,OAAO,EAAE,KAJ+B;AAKxCC,EAAAA,cAAc,EAAE,KALwB;AAMxCC,EAAAA,MAAM,EAAE;AANgC,CAArC,C,CASP;AACA;;AACA,MAAMC,OAAgC,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AACvE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKZ,mBAAmB,CAACa,aAAzB;AAAwC;AACpC,iCACOH,KADP;AAEIJ,UAAAA,OAAO,EAAE;AAFb;AAIH;;AACD,SAAKN,mBAAmB,CAACc,aAAzB;AAAwC;AACpC,iCAAYJ,KAAZ;AAAmBJ,UAAAA,OAAO,EAAE,KAA5B;AAAmCJ,UAAAA,SAAS,EAAES,MAAM,CAACI;AAArD;AACH;;AACD,SAAKf,mBAAmB,CAACgB,WAAzB;AAAsC;AAClC,iCAAYN,KAAZ;AAAmBJ,UAAAA,OAAO,EAAE,KAA5B;AAAmCF,UAAAA,MAAM,EAAEO,MAAM,CAACI;AAAlD;AACH;;AACD,SAAKf,mBAAmB,CAACiB,eAAzB;AAA0C;AACtC,iCACOP,KADP;AAEIH,UAAAA,cAAc,EAAE;AAFpB;AAIH;;AACD,SAAKP,mBAAmB,CAACkB,aAAzB;AAAwC;AACpC,iCACOR,KADP;AAEIF,UAAAA,MAAM,EAAE;AAFZ;AAIH;;AACD,SAAKR,mBAAmB,CAACmB,YAAzB;AAAuC;AACnC,iCACOT,KADP;AAEIH,UAAAA,cAAc,EAAE,KAFpB;AAGIC,UAAAA,MAAM,EAAE;AAHZ;AAKH;;AACD;AAAS;AACL,eAAOE,KAAP;AACH;AAlCL;AAoCH,CArCD,C,CAuCA;AACA;;;AACA,SAASD,OAAO,IAAIW,gBAApB","sourcesContent":["import { Reducer } from 'redux';\nimport { SquadronsState, SquadronActionTypes } from './types';\nimport SquadronModel from \"./SquadronModel\";\n\n// Type-safe initialState!\nexport const initialState: SquadronsState = {\n    squadrons: [] as SquadronModel[],\n    newSquadron: null,\n    errors: undefined,\n    loading: false,\n    addingSquadron: false,\n    saving: false,\n};\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<SquadronsState> = (state = initialState, action) => {\n    switch (action.type) {\n        case SquadronActionTypes.FETCH_REQUEST: {\n            return {\n                ...state,\n                loading: true\n            };\n        }\n        case SquadronActionTypes.FETCH_SUCCESS: {\n            return { ...state, loading: false, squadrons: action.payload };\n        }\n        case SquadronActionTypes.FETCH_ERROR: {\n            return { ...state, loading: false, errors: action.payload };\n        }\n        case SquadronActionTypes.ADDING_SQUADRON: {\n            return {\n                ...state,\n                addingSquadron: true\n            };\n        }\n        case SquadronActionTypes.SAVE_SQUADRON: {\n            return {\n                ...state,\n                saving: true\n            };\n        }\n        case SquadronActionTypes.SAVE_SUCCESS: {\n            return {\n                ...state,\n                addingSquadron: false,\n                saving: false\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as squadronsReducer };"]},"metadata":{},"sourceType":"module"}