{"ast":null,"code":"import _defineProperty from \"/Users/chairforce/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SquadronActionTypes } from './types';\nimport { addingSquadron } from \"./actions\"; // Type-safe initialState!\n\nexport const initialState = {\n  squadrons: [],\n  newSquadron: undefined,\n  errors: undefined,\n  loading: false,\n  addingSquadron: false,\n  saving: undefined\n}; // Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SquadronActionTypes.FETCH_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          loading: true\n        });\n      }\n\n    case SquadronActionTypes.FETCH_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          loading: false,\n          squadrons: action.payload\n        });\n      }\n\n    case SquadronActionTypes.FETCH_ERROR:\n      {\n        return _objectSpread({}, state, {\n          loading: false,\n          errors: action.payload\n        });\n      }\n\n    case SquadronActionTypes.ADDING_SQUADRON:\n      {\n        console.log(\"Changing Adding squadron state:\" + addingSquadron);\n        return _objectSpread({}, state, {\n          addingSquadron: !addingSquadron\n        });\n      }\n\n    case SquadronActionTypes.SAVE_SQUADRON:\n      {\n        return _objectSpread({}, state, {\n          saving: true\n        });\n      }\n\n    case SquadronActionTypes.SAVE_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          addingSquadron: false,\n          saving: false\n        });\n      }\n\n    case SquadronActionTypes.UPDATE_NEW_SQUADRON:\n      {\n        return _objectSpread({}, state, {\n          newSquadron: action.payload\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}; // Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\n\n\nexport { reducer as squadronsReducer };","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/store/squadrons/reducer.ts"],"names":["SquadronActionTypes","addingSquadron","initialState","squadrons","newSquadron","undefined","errors","loading","saving","reducer","state","action","type","FETCH_REQUEST","FETCH_SUCCESS","payload","FETCH_ERROR","ADDING_SQUADRON","console","log","SAVE_SQUADRON","SAVE_SUCCESS","UPDATE_NEW_SQUADRON","squadronsReducer"],"mappings":";;;;;;AACA,SAAyBA,mBAAzB,QAAoD,SAApD;AAEA,SAAQC,cAAR,QAA6B,WAA7B,C,CAEA;;AACA,OAAO,MAAMC,YAA4B,GAAG;AACxCC,EAAAA,SAAS,EAAE,EAD6B;AAExCC,EAAAA,WAAW,EAAEC,SAF2B;AAGxCC,EAAAA,MAAM,EAAED,SAHgC;AAIxCE,EAAAA,OAAO,EAAE,KAJ+B;AAKxCN,EAAAA,cAAc,EAAE,KALwB;AAMxCO,EAAAA,MAAM,EAAEH;AANgC,CAArC,C,CASP;AACA;;AACA,MAAMI,OAAgC,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AACvE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKZ,mBAAmB,CAACa,aAAzB;AAAwC;AACpC,iCACOH,KADP;AAEIH,UAAAA,OAAO,EAAE;AAFb;AAIH;;AACD,SAAKP,mBAAmB,CAACc,aAAzB;AAAwC;AACpC,iCAAYJ,KAAZ;AAAmBH,UAAAA,OAAO,EAAE,KAA5B;AAAmCJ,UAAAA,SAAS,EAAEQ,MAAM,CAACI;AAArD;AACH;;AACD,SAAKf,mBAAmB,CAACgB,WAAzB;AAAsC;AAClC,iCAAYN,KAAZ;AAAmBH,UAAAA,OAAO,EAAE,KAA5B;AAAmCD,UAAAA,MAAM,EAAEK,MAAM,CAACI;AAAlD;AACH;;AACD,SAAKf,mBAAmB,CAACiB,eAAzB;AAA0C;AACtCC,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoClB,cAAhD;AACA,iCACOS,KADP;AAEIT,UAAAA,cAAc,EAAE,CAACA;AAFrB;AAIH;;AACD,SAAKD,mBAAmB,CAACoB,aAAzB;AAAwC;AACpC,iCACOV,KADP;AAEIF,UAAAA,MAAM,EAAE;AAFZ;AAIH;;AACD,SAAKR,mBAAmB,CAACqB,YAAzB;AAAuC;AACnC,iCACOX,KADP;AAEIT,UAAAA,cAAc,EAAE,KAFpB;AAGIO,UAAAA,MAAM,EAAE;AAHZ;AAKH;;AACD,SAAKR,mBAAmB,CAACsB,mBAAzB;AAA8C;AAC1C,iCACOZ,KADP;AAEIN,UAAAA,WAAW,EAAEO,MAAM,CAACI;AAFxB;AAIH;;AACD;AAAS;AACL,eAAOL,KAAP;AACH;AAzCL;AA2CH,CA5CD,C,CA8CA;AACA;;;AACA,SAASD,OAAO,IAAIc,gBAApB","sourcesContent":["import { Reducer } from 'redux';\nimport { SquadronsState, SquadronActionTypes } from './types';\nimport SquadronModel from \"./SquadronModel\";\nimport {addingSquadron} from \"./actions\";\n\n// Type-safe initialState!\nexport const initialState: SquadronsState = {\n    squadrons: [] as SquadronModel[],\n    newSquadron: undefined,\n    errors: undefined,\n    loading: false,\n    addingSquadron: false,\n    saving: undefined,\n};\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<SquadronsState> = (state = initialState, action) => {\n    switch (action.type) {\n        case SquadronActionTypes.FETCH_REQUEST: {\n            return {\n                ...state,\n                loading: true\n            };\n        }\n        case SquadronActionTypes.FETCH_SUCCESS: {\n            return { ...state, loading: false, squadrons: action.payload };\n        }\n        case SquadronActionTypes.FETCH_ERROR: {\n            return { ...state, loading: false, errors: action.payload };\n        }\n        case SquadronActionTypes.ADDING_SQUADRON: {\n            console.log(\"Changing Adding squadron state:\" + addingSquadron);\n            return {\n                ...state,\n                addingSquadron: !addingSquadron\n            };\n        }\n        case SquadronActionTypes.SAVE_SQUADRON: {\n            return {\n                ...state,\n                saving: true\n            };\n        }\n        case SquadronActionTypes.SAVE_SUCCESS: {\n            return {\n                ...state,\n                addingSquadron: false,\n                saving: false\n            };\n        }\n        case SquadronActionTypes.UPDATE_NEW_SQUADRON: {\n            return {\n                ...state,\n                newSquadron: action.payload\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as squadronsReducer };"]},"metadata":{},"sourceType":"module"}