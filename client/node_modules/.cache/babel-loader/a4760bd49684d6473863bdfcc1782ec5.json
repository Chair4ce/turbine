{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ridley/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(rootSaga);import{combineReducers}from'redux';import{all,fork}from'redux-saga/effects';import{connectRouter}from'connected-react-router';import{layoutReducer}from'./layout';import membersSaga from'./members/sagas';import{membersReducer}from'./members/reducer';import{squadronsReducer}from\"./squadrons/reducer\";import squadronSaga from\"./squadrons/sagas\";import{flightsReducer}from\"./flights/reducer\";import{AETsReducer}from\"./AETs/reducer\";import flightSaga from\"./flights/sagas\";import AETSaga from\"./AETs/sagas\";// The top-level state object\n// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport var createRootReducer=function createRootReducer(history){return combineReducers({layout:layoutReducer,squadrons:squadronsReducer,flights:flightsReducer,AETs:AETsReducer,members:membersReducer,router:connectRouter(history)});};// Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\nexport function rootSaga(){return _regeneratorRuntime.wrap(function rootSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return all([fork(membersSaga),fork(squadronSaga),fork(flightSaga),fork(AETSaga)]);case 2:case\"end\":return _context.stop();}}},_marked);}","map":{"version":3,"sources":["/Users/ridley/workspace/turbine/client/src/store/index.ts"],"names":["rootSaga","combineReducers","all","fork","connectRouter","layoutReducer","membersSaga","membersReducer","squadronsReducer","squadronSaga","flightsReducer","AETsReducer","flightSaga","AETSaga","createRootReducer","history","layout","squadrons","flights","AETs","members","router"],"mappings":"sMA8CiBA,Q,EA9CjB,OAASC,eAAT,KAAgC,OAAhC,CACA,OAASC,GAAT,CAAcC,IAAd,KAA0B,oBAA1B,CACA,OAASC,aAAT,KAA2C,wBAA3C,CAGA,OAAsBC,aAAtB,KAA2C,UAA3C,CAEA,MAAOC,CAAAA,WAAP,KAAwB,iBAAxB,CACA,OAASC,cAAT,KAA+B,mBAA/B,CAGA,OAASC,gBAAT,KAAiC,qBAAjC,CACA,MAAOC,CAAAA,YAAP,KAAyB,mBAAzB,CAGA,OAAQC,cAAR,KAA6B,mBAA7B,CACA,OAAQC,WAAR,KAA0B,gBAA1B,CACA,MAAOC,CAAAA,UAAP,KAAuB,iBAAvB,CACA,MAAOC,CAAAA,OAAP,KAAoB,cAApB,CAEA;AAUA;AACA;AACA;AACA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,OAAD,QAC7Bd,CAAAA,eAAe,CAAC,CACZe,MAAM,CAAEX,aADI,CAEZY,SAAS,CAAET,gBAFC,CAGZU,OAAO,CAAER,cAHG,CAIZS,IAAI,CAAER,WAJM,CAKZS,OAAO,CAAEb,cALG,CAMZc,MAAM,CAAEjB,aAAa,CAACW,OAAD,CANT,CAAD,CADc,EAA1B,CAUP;AACA;AACA;AACA,MAAO,SAAUf,CAAAA,QAAV,oIACH,MAAME,CAAAA,GAAG,CAAC,CAACC,IAAI,CAACG,WAAD,CAAL,CAAmBH,IAAI,CAACM,YAAD,CAAvB,CAAsCN,IAAI,CAACS,UAAD,CAA1C,CAAwDT,IAAI,CAACU,OAAD,CAA5D,CAAD,CAAT,CADG","sourcesContent":["import { combineReducers } from 'redux';\nimport { all, fork } from 'redux-saga/effects';\nimport { connectRouter, RouterState } from 'connected-react-router';\nimport { History } from 'history';\n\nimport { LayoutState, layoutReducer } from './layout';\n\nimport membersSaga from './members/sagas';\nimport { membersReducer } from './members/reducer';\nimport { MembersState } from './members/types';\nimport { SquadronsState } from \"./squadrons/types\";\nimport { squadronsReducer } from \"./squadrons/reducer\";\nimport squadronSaga from \"./squadrons/sagas\";\nimport {FlightsState} from \"./flights/types\";\nimport {AETsState} from \"./AETs/types\";\nimport {flightsReducer} from \"./flights/reducer\";\nimport {AETsReducer} from \"./AETs/reducer\";\nimport flightSaga from \"./flights/sagas\";\nimport AETSaga from \"./AETs/sagas\";\n\n// The top-level state object\nexport interface ApplicationState {\n    layout: LayoutState;\n    members: MembersState;\n    squadrons: SquadronsState;\n    flights: FlightsState;\n    AETs: AETsState;\n    router: RouterState;\n}\n\n// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport const createRootReducer = (history: History) =>\n    combineReducers({\n        layout: layoutReducer,\n        squadrons: squadronsReducer,\n        flights: flightsReducer,\n        AETs: AETsReducer,\n        members: membersReducer,\n        router: connectRouter(history),\n    });\n\n// Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\nexport function* rootSaga() {\n    yield all([fork(membersSaga),fork(squadronSaga),fork(flightSaga), fork(AETSaga)]);\n}\n"]},"metadata":{},"sourceType":"module"}