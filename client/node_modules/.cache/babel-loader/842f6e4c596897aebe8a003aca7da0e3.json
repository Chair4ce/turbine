{"ast":null,"code":"import _regeneratorRuntime from\"/Users/chairforce/workspace/turbine/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(handleFetch),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchFetchRequest),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(membersSaga);import{all,call,fork,put,takeEvery}from'redux-saga/effects';import{MembersActionTypes}from'./types';import{fetchError,fetchSuccess}from'./actions';import{callApi}from'../../utils/api';var API_ENDPOINT='http://localhost:8080';function handleFetch(){var res;return _regeneratorRuntime.wrap(function handleFetch$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(callApi,'get',API_ENDPOINT,'api/members');case 3:res=_context.sent;if(!res.error){_context.next=10;break;}console.log(\"error :\"+res.error);_context.next=8;return put(fetchError(res.error));case 8:_context.next=13;break;case 10:console.log(\"data returned: \"+res);_context.next=13;return put(fetchSuccess(res));case 13:_context.next=26;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](0);if(!(_context.t0 instanceof Error&&_context.t0.stack)){_context.next=23;break;}console.log(\" err stack :\"+_context.t0.stack);_context.next=21;return put(fetchError(_context.t0.stack));case 21:_context.next=26;break;case 23:console.log(\"dispatching fetcherror\");_context.next=26;return put(fetchError('An unknown error occured.'));case 26:case\"end\":return _context.stop();}}},_marked,null,[[0,15]]);}// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction watchFetchRequest(){return _regeneratorRuntime.wrap(function watchFetchRequest$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(MembersActionTypes.FETCH_REQUEST,handleFetch);case 2:case\"end\":return _context2.stop();}}},_marked2);}// We can also use `fork()` here to split our saga into multiple watchers.\nfunction membersSaga(){return _regeneratorRuntime.wrap(function membersSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([fork(watchFetchRequest)]);case 2:case\"end\":return _context3.stop();}}},_marked3);}export default membersSaga;","map":{"version":3,"sources":["/Users/chairforce/workspace/turbine/client/src/store/members/sagas.ts"],"names":["handleFetch","watchFetchRequest","membersSaga","all","call","fork","put","takeEvery","MembersActionTypes","fetchError","fetchSuccess","callApi","API_ENDPOINT","res","error","console","log","Error","stack","FETCH_REQUEST"],"mappings":"0MAOUA,W,iDAyBAC,iB,iDAKAC,W,EArCV,OAASC,GAAT,CAAcC,IAAd,CAAoBC,IAApB,CAA0BC,GAA1B,CAA+BC,SAA/B,KAAgD,oBAAhD,CACA,OAASC,kBAAT,KAAmC,SAAnC,CACA,OAASC,UAAT,CAAqBC,YAArB,KAAyC,WAAzC,CACA,OAASC,OAAT,KAAwB,iBAAxB,CAEA,GAAMC,CAAAA,YAAY,CAAG,uBAArB,CAEA,QAAUZ,CAAAA,WAAV,+JAGoB,MAAMI,CAAAA,IAAI,CAACO,OAAD,CAAU,KAAV,CAAiBC,YAAjB,CAA+B,aAA/B,CAAV,CAHpB,OAGcC,GAHd,mBAKYA,GAAG,CAACC,KALhB,0BAMYC,OAAO,CAACC,GAAR,CAAY,UAAYH,GAAG,CAACC,KAA5B,EANZ,gBAOY,MAAMR,CAAAA,GAAG,CAACG,UAAU,CAACI,GAAG,CAACC,KAAL,CAAX,CAAT,CAPZ,sCASYC,OAAO,CAACC,GAAR,CAAY,kBAAoBH,GAAhC,EATZ,iBAUY,MAAMP,CAAAA,GAAG,CAACI,YAAY,CAACG,GAAD,CAAb,CAAT,CAVZ,8FAaY,sBAAeI,CAAAA,KAAf,EAAwB,YAAIC,KAbxC,2BAcYH,OAAO,CAACC,GAAR,CAAY,eAAiB,YAAIE,KAAjC,EAdZ,iBAeY,MAAMZ,CAAAA,GAAG,CAACG,UAAU,CAAC,YAAIS,KAAL,CAAX,CAAT,CAfZ,uCAiBYH,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAjBZ,iBAkBY,MAAMV,CAAAA,GAAG,CAACG,UAAU,CAAC,2BAAD,CAAX,CAAT,CAlBZ,qEAuBA;AACA;AACA,QAAUR,CAAAA,iBAAV,iJACI,MAAMM,CAAAA,SAAS,CAACC,kBAAkB,CAACW,aAApB,CAAmCnB,WAAnC,CAAf,CADJ,wDAIA;AACA,QAAUE,CAAAA,WAAV,2IACI,MAAMC,CAAAA,GAAG,CAAC,CAACE,IAAI,CAACJ,iBAAD,CAAL,CAAD,CAAT,CADJ,wDAIA,cAAeC,CAAAA,WAAf","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { MembersActionTypes } from './types';\nimport { fetchError, fetchSuccess } from './actions';\nimport { callApi } from '../../utils/api';\n\nconst API_ENDPOINT = 'http://localhost:8080';\n\nfunction *handleFetch() {\n    try {\n        // To call async functions, use redux-saga's `call()`.\n        const res = yield call(callApi, 'get', API_ENDPOINT, 'api/members');\n\n        if (res.error) {\n            console.log(\"error :\" + res.error);\n            yield put(fetchError(res.error));\n        } else {\n            console.log(\"data returned: \" + res);\n            yield put(fetchSuccess(res));\n        }\n    } catch (err) {\n        if (err instanceof Error && err.stack) {\n            console.log(\" err stack :\" + err.stack);\n            yield put(fetchError(err.stack));\n        } else {\n            console.log(\"dispatching fetcherror\");\n            yield put(fetchError('An unknown error occured.'));\n        }\n    }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction *watchFetchRequest() {\n    yield takeEvery(MembersActionTypes.FETCH_REQUEST, handleFetch);\n}\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction *membersSaga() {\n    yield all([fork(watchFetchRequest)]);\n}\n\nexport default membersSaga;\n"]},"metadata":{},"sourceType":"module"}