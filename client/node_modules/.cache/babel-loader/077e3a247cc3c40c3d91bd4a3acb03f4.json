{"ast":null,"code":"import _classCallCheck from\"/Users/chairforce/workspace/turbyne/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/chairforce/workspace/turbyne/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/chairforce/workspace/turbyne/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/chairforce/workspace/turbyne/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/chairforce/workspace/turbyne/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _taggedTemplateLiteral from\"/Users/chairforce/workspace/turbyne/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n    position: relative;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import*as React from'react';import{connect}from'react-redux';import{MemberInfobox// MemberInfoboxImage,\n,MemberInfoboxHeading,MemberInfoboxInner// MemberInfoboxBlurBackground,\n,MemberName// MemberRoles,\n}from'../../components/members/MemberInfobox';import{MemberStats,MemberStatsInner// StatAttribute,\n// Bullet\n}from'../../components/members/MemberStats';import{MemberDetails,MemberDetailsColumn,MemberDetailsRow,MemberDetailsAttrName}from'../../components/members/MemberDetails';import Page from'../../components/layout/Page';import Container from'../../components/layout/Container';import{fetchRequest}from'../../store/members/actions';import styled from'../../utils/styled';import LoadingSpinner from'../../components/data/LoadingSpinner';// Separate state props + dispatch props to their own interfaces.\n// const API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || 'https://api.opendota.com';\nvar Wrapper=styled('div')(_templateObject());var ShowMembersPage=/*#__PURE__*/function(_React$Component){_inherits(ShowMembersPage,_React$Component);function ShowMembersPage(props){var _this;_classCallCheck(this,ShowMembersPage);_this=_possibleConstructorReturn(this,_getPrototypeOf(ShowMembersPage).call(this,props));_this.state={};return _this;}_createClass(ShowMembersPage,[{key:\"componentDidMount\",value:function componentDidMount(){var _this$props=this.props,data=_this$props.data,fetchMembers=_this$props.fetchMembers;if(!data||data.length===0){fetchMembers();}}},{key:\"render\",value:function render(){var _this$props2=this.props,data=_this$props2.data,loading=_this$props2.loading,match=_this$props2.match;var selected=data.find(function(member){return member.id+member.full_name===match.params.memberId;});return React.createElement(Page,null,React.createElement(Container,null,React.createElement(Wrapper,null,loading&&React.createElement(LoadingSpinner,null),selected&&React.createElement(React.Fragment,null,React.createElement(MemberInfobox,null,React.createElement(MemberInfoboxInner,null,React.createElement(MemberInfoboxHeading,null,React.createElement(MemberName,null,selected.full_name)),React.createElement(MemberStats,null,React.createElement(MemberStatsInner,null,React.createElement(MemberDetailsRow,null,selected.dafsc))))),React.createElement(MemberDetails,null,React.createElement(MemberDetailsColumn,null,React.createElement(MemberDetailsRow,null,React.createElement(MemberDetailsAttrName,null,\"DUTY TITLE:\"),\" \",selected.duty_title),React.createElement(MemberDetailsRow,null,React.createElement(MemberDetailsAttrName,null,\"Grade:\"),\" \",selected.grade)),React.createElement(MemberDetailsColumn,null,React.createElement(MemberDetailsRow,null,React.createElement(MemberDetailsAttrName,null,\"Office Symbol:\"),' ',selected.office_symbol)))))));}}]);return ShowMembersPage;}(React.Component);// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nvar mapStateToProps=function mapStateToProps(_ref){var members=_ref.members;return{loading:members.loading,data:members.data};};// mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\nvar mapDispatchToProps={fetchMembers:fetchRequest};// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(mapStateToProps,mapDispatchToProps)(ShowMembersPage);","map":{"version":3,"sources":["/Users/chairforce/workspace/turbyne/client/src/pages/members/show.tsx"],"names":["React","connect","MemberInfobox","MemberInfoboxHeading","MemberInfoboxInner","MemberName","MemberStats","MemberStatsInner","MemberDetails","MemberDetailsColumn","MemberDetailsRow","MemberDetailsAttrName","Page","Container","fetchRequest","styled","LoadingSpinner","Wrapper","ShowMembersPage","props","state","data","fetchMembers","length","loading","match","selected","find","member","id","full_name","params","memberId","dafsc","duty_title","grade","office_symbol","Component","mapStateToProps","members","mapDispatchToProps"],"mappings":"soCAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,OAAT,KAAwB,aAAxB,CAGA,OACIC,aACA;AAFJ,CAGIC,oBAHJ,CAIIC,kBACA;AALJ,CAMIC,UACA;AAPJ,KAQO,wCARP,CASA,OACIC,WADJ,CAEIC,gBACA;AACA;AAJJ,KAKO,sCALP,CAMA,OACIC,aADJ,CAEIC,mBAFJ,CAGIC,gBAHJ,CAIIC,qBAJJ,KAKO,wCALP,CAMA,MAAOC,CAAAA,IAAP,KAAiB,8BAAjB,CACA,MAAOC,CAAAA,SAAP,KAAsB,mCAAtB,CAIA,OAASC,YAAT,KAA6B,6BAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,CACA,MAAOC,CAAAA,cAAP,KAA2B,sCAA3B,CAEA;AAsBA;AAEA,GAAMC,CAAAA,OAAO,CAAGF,MAAM,CAAC,KAAD,CAAT,mBAAb,C,GAIMG,CAAAA,e,qFACF,yBAAYC,KAAZ,CAA6B,iDACzB,iFAAMA,KAAN,GAEA,MAAKC,KAAL,CAAa,EAAb,CAHyB,aAI5B,C,yFAE0B,iBACQ,KAAKD,KADb,CACfE,IADe,aACfA,IADe,CACTC,YADS,aACTA,YADS,CAGvB,GAAI,CAACD,IAAD,EAASA,IAAI,CAACE,MAAL,GAAgB,CAA7B,CAAgC,CAC5BD,YAAY,GACf,CACJ,C,uCAEe,kBACqB,KAAKH,KAD1B,CACJE,IADI,cACJA,IADI,CACEG,OADF,cACEA,OADF,CACWC,KADX,cACWA,KADX,CAEZ,GAAMC,CAAAA,QAAQ,CAAGL,IAAI,CAACM,IAAL,CAAU,SAAAC,MAAM,QAAMA,CAAAA,MAAM,CAACC,EAAP,CAAYD,MAAM,CAACE,SAApB,GAAmCL,KAAK,CAACM,MAAN,CAAaC,QAArD,EAAhB,CAAjB,CAEA,MACI,qBAAC,IAAD,MACI,oBAAC,SAAD,MACI,oBAAC,OAAD,MACKR,OAAO,EACI,oBAAC,cAAD,MAFhB,CAIKE,QAAQ,EACL,wCACI,oBAAC,aAAD,MACI,oBAAC,kBAAD,MACI,oBAAC,oBAAD,MACI,oBAAC,UAAD,MAAaA,QAAQ,CAACI,SAAtB,CADJ,CADJ,CAII,oBAAC,WAAD,MACI,oBAAC,gBAAD,MACI,oBAAC,gBAAD,MAAmBJ,QAAQ,CAACO,KAA5B,CADJ,CADJ,CAJJ,CADJ,CADJ,CAaI,oBAAC,aAAD,MACI,oBAAC,mBAAD,MACI,oBAAC,gBAAD,MACI,oBAAC,qBAAD,oBADJ,KACgEP,QAAQ,CAACQ,UADzE,CADJ,CAII,oBAAC,gBAAD,MACI,oBAAC,qBAAD,eADJ,KAC2DR,QAAQ,CAACS,KADpE,CAJJ,CADJ,CASI,oBAAC,mBAAD,MACI,oBAAC,gBAAD,MACI,oBAAC,qBAAD,uBADJ,CACkE,GADlE,CAEKT,QAAQ,CAACU,aAFd,CADJ,CATJ,CAbJ,CALR,CADJ,CADJ,CADJ,CA2CH,C,6BA9DyBpC,KAAK,CAACqC,S,EAiEpC;AACA;AACA;AACA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,UAAGC,CAAAA,OAAH,MAAGA,OAAH,OAAoC,CACxDf,OAAO,CAAEe,OAAO,CAACf,OADuC,CAExDH,IAAI,CAAEkB,OAAO,CAAClB,IAF0C,CAApC,EAAxB,CAKA;AACA;AACA,GAAMmB,CAAAA,kBAAkB,CAAG,CACvBlB,YAAY,CAAER,YADS,CAA3B,CAIA;AACA;AACA,cAAeb,CAAAA,OAAO,CAClBqC,eADkB,CAElBE,kBAFkB,CAAP,CAGbtB,eAHa,CAAf","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router';\n\nimport {\n    MemberInfobox,\n    // MemberInfoboxImage,\n    MemberInfoboxHeading,\n    MemberInfoboxInner,\n    // MemberInfoboxBlurBackground,\n    MemberName,\n    // MemberRoles,\n} from '../../components/members/MemberInfobox';\nimport {\n    MemberStats,\n    MemberStatsInner,\n    // StatAttribute,\n    // Bullet\n} from '../../components/members/MemberStats';\nimport {\n    MemberDetails,\n    MemberDetailsColumn,\n    MemberDetailsRow,\n    MemberDetailsAttrName,\n} from '../../components/members/MemberDetails';\nimport Page from '../../components/layout/Page';\nimport Container from '../../components/layout/Container';\n\nimport { ApplicationState } from '../../store';\nimport { Member } from '../../store/members/types';\nimport { fetchRequest } from '../../store/members/actions';\nimport styled from '../../utils/styled';\nimport LoadingSpinner from '../../components/data/LoadingSpinner';\n\n// Separate state props + dispatch props to their own interfaces.\ninterface PropsFromState {\n    loading: boolean;\n    data: Member[];\n}\n\n// We can use `typeof` here to map our dispatch types to the props, like so.\ninterface PropsFromDispatch {\n    fetchMembers: typeof fetchRequest;\n}\n\ninterface RouteParams {\n    memberId: string;\n}\n\ninterface State {\n    selected?: Member;\n}\n\n// Combine both state + dispatch props - as well as any props we want to pass - in a union type.\ntype AllProps = PropsFromState & PropsFromDispatch & RouteComponentProps<RouteParams>;\n\n// const API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || 'https://api.opendota.com';\n\nconst Wrapper = styled('div')`\n    position: relative;\n`;\n\nclass ShowMembersPage extends React.Component<AllProps, State> {\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    public componentDidMount() {\n        const { data, fetchMembers } = this.props;\n\n        if (!data || data.length === 0) {\n            fetchMembers();\n        }\n    }\n\n    public render() {\n        const { data, loading, match } = this.props;\n        const selected = data.find(member => ((member.id + member.full_name) === match.params.memberId));\n\n        return (\n            <Page>\n                <Container>\n                    <Wrapper>\n                        {loading && (\n                                    <LoadingSpinner />\n                        )}\n                        {selected && (\n                            <>\n                                <MemberInfobox>\n                                    <MemberInfoboxInner>\n                                        <MemberInfoboxHeading>\n                                            <MemberName>{selected.full_name}</MemberName>\n                                        </MemberInfoboxHeading>\n                                        <MemberStats>\n                                            <MemberStatsInner>\n                                                <MemberDetailsRow>{selected.dafsc}</MemberDetailsRow>\n                                            </MemberStatsInner>\n                                        </MemberStats>\n                                    </MemberInfoboxInner>\n                                </MemberInfobox>\n                                <MemberDetails>\n                                    <MemberDetailsColumn>\n                                        <MemberDetailsRow>\n                                            <MemberDetailsAttrName>DUTY TITLE:</MemberDetailsAttrName> {selected.duty_title}\n                                        </MemberDetailsRow>\n                                        <MemberDetailsRow>\n                                            <MemberDetailsAttrName>Grade:</MemberDetailsAttrName> {selected.grade}\n                                        </MemberDetailsRow>\n                                    </MemberDetailsColumn>\n                                    <MemberDetailsColumn>\n                                        <MemberDetailsRow>\n                                            <MemberDetailsAttrName>Office Symbol:</MemberDetailsAttrName>{' '}\n                                            {selected.office_symbol}\n                                        </MemberDetailsRow>\n                                    </MemberDetailsColumn>\n                                </MemberDetails>\n                            </>\n                        )}\n                    </Wrapper>\n                </Container>\n            </Page>\n        );\n    }\n}\n\n// It's usually good practice to only include one context at a time in a connected component.\n// Although if necessary, you can always include multiple contexts. Just make sure to\n// separate them from each other to prevent prop conflicts.\nconst mapStateToProps = ({ members }: ApplicationState) => ({\n    loading: members.loading,\n    data: members.data,\n});\n\n// mapDispatchToProps is especially useful for constraining our actions to the connected component.\n// You can access these via `this.props`.\nconst mapDispatchToProps = {\n    fetchMembers: fetchRequest,\n};\n\n// Now let's connect our component!\n// With redux v4's improved typings, we can finally omit generics here.\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ShowMembersPage);\n"]},"metadata":{},"sourceType":"module"}